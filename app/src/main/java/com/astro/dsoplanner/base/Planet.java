package com.astro.dsoplanner.base;

import static java.lang.Math.PI;
import static java.lang.Math.abs;
import static java.lang.Math.acos;
import static java.lang.Math.asin;
import static java.lang.Math.atan;
import static java.lang.Math.atan2;
import static java.lang.Math.cos;
import static java.lang.Math.log10;
import static java.lang.Math.sin;
import static java.lang.Math.sqrt;
import static java.lang.Math.tan;

import java.io.DataInputStream;
import java.io.IOException;
import java.util.Calendar;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.RectF;
import android.util.Log;

import com.astro.dsoplanner.AstroTools;
import com.astro.dsoplanner.AstroTools.RaDecRec;
import com.astro.dsoplanner.Global;


import com.astro.dsoplanner.R;
import com.astro.dsoplanner.SettingsActivity;
import com.astro.dsoplanner.util.Holder2;

//planet algorithms are from Jean Meeus-Astronomical Algorithms
public class Planet extends AstroObject {


    private static final String SATURN = "Saturn";
    private static final String JUPITER = "Jupiter";
    private static final String MARS = "Mars";
    private static final String EARTH = "Earth";
    private static final String VENUS = "Venus";
    private static final String MERCURY = "Mercury";
    private static final String MOON = "Moon";
    private static final String SUN = "Sun";
    private static final String URANUS = "Uranus";
    private static final String NEPTUNE = "Neptune";

    private static final String TAG = Planet.class.getSimpleName();

    private static Bitmap moonpic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.bmoon);
    private static Bitmap sunpic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.bsun);
    private static Bitmap merpic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.bmercury);
    private static Bitmap venpic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.bvenus);
    private static Bitmap marspic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.bmars);
    private static Bitmap juppic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.bjupiter);
    private static Bitmap satpic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.bsaturn);
    private static Bitmap uranpic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.buranus);
    private static Bitmap neptpic = BitmapFactory.decodeResource(Global.getAppContext().getResources(),
            R.drawable.bneptun);

    public static enum PlanetType {Sun, Moon, MoonNoParallax, Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune}

    private double mag;
    private double angular_size;//in degrees
    private PlanetType pl;
    double dist;
    private final int RED_COLOR_MASK = 0xff7f0000; //to mask planets bitmap in night mode
    private String planetName = "";

    private static class Rec {
        public double l;
        public double b;
        public double r;

        public Rec(double l, double b, double r) {
            this.l = l;
            this.b = b;
            this.r = r;
        }

        @Override
        public String toString() {
            return "Rec [l=" + l * 180 / Math.PI + ", b=" + b * 180 / Math.PI + ", r=" + r + "]";
        }
    }

    private static class RecC {
        public double ra;
        public double dec;
        public double mag;
        public double distance; //in km

        public RecC(double ra, double dec, double mag, double distance) {
            this.ra = ra;
            this.dec = dec;
            this.mag = mag;
            this.distance = distance;
        }
    }

    private static interface EclCoord {
        Rec EclCoordFunction(double t);
    }

    private static double[] MercuryL0A = {440250710, 40989415, 5046294, 855347, 165590, 34562, 7583, 3560, 1803, 1726, 1590, 1365, 1017, 714, 644, 451, 404, 352, 345, 343, 339, 325, 273, 264, 260, 239, 235, 217, 209, 183, 182, 176, 173, 142, 138, 125, 118, 106};
    private static double[] MercuryL0B = {0, 1.48302034, 4.4778549, 1.165203, 4.119692, 0.77931, 3.7135, 1.5120, 4.1033, 0.3583, 2.9951, 4.5992, 0.8803, 1.541, 5.303, 6.050, 3.282, 5.242, 2.792, 5.765, 5.863, 1.337, 2.495, 3.917, 0.987, 0.113, 0.267, 0.660, 2.092, 2.629, 2.434, 4.536, 2.452, 3.360, 0.291, 3.721, 2.781, 4.206};
    private static double[] MercuryL0C = {0, 26087.903, 52175.806, 78263.709, 104351.612, 130439.515, 156527.418, 1109.378, 5661.332, 182615.322, 25028.521, 27197.281, 31749.235, 24978.525, 21535.950, 51116.424, 208703.225, 20426.571, 15874.618, 955.600, 25558.212, 53205.135, 529.691, 57837.138, 4551.953, 1059.382, 11322.664, 13521.751, 47623.853, 27043.503, 25661.305, 51066.428, 24498.830, 37410.567, 10213.286, 39609.655, 77204.327, 19804.827};

    private static double[] MercuryL1A = {2608814706223., 1126008, 303471, 80538, 21245, 5592, 1472, 388, 352, 103, 94, 91, 52, 44, 28, 27};
    private static double[] MercuryL1B = {0, 6.2170397, 3.055655, 6.10455, 2.83532, 5.8268, 2.5185, 5.480, 3.052, 2.149, 6.12, 0, 5.62, 4.57, 3.04, 5.09};
    private static double[] MercuryL1C = {0, 26087.903, 52175.806, 78263.709, 104351.612, 130439.515, 156527.418, 182615.322, 1109.379, 208703.225, 27197.28, 24978.52, 5661.33, 25028.52, 51066.43, 234791.13};

    private static double[] MercuryL2A = {53050, 16904, 7397, 3018, 1107, 378, 123, 39, 15, 12};
    private static double[] MercuryL2B = {0, 4.69072, 1.3474, 4.4564, 1.2623, 4.32, 1.069, 4.08, 4.63, 0.79};
    private static double[] MercuryL2C = {0, 26087.903, 52175.806, 78263.709, 104351.612, 130439.516, 156527.419, 182615.32, 1109.38, 208703.23};

    private static double[] MercuryB0A = {11737529, 2388077, 1222840, 543252, 129779, 31867, 7963, 2014, 514, 209, 208, 132, 121, 100};
    private static double[] MercuryB0B = {1.983574, 5.037389, 3.141592, 1.796444, 4.832325, 1.58088, 4.6097, 1.3532, 4.378, 2.020, 4.918, 1.119, 1.813, 5.657};
    private static double[] MercuryB0C = {26087.903, 52175.806, 0, 78263.709, 104351.612, 130439.515, 156527.418, 182615.322, 208703.225, 24978.525, 27197.282, 234791.128, 53285.185, 20426.571};

    private static double[] MercuryB1A = {429151, 146234, 22675, 10895, 6353, 2496, 860, 278, 86, 28, 26};
    private static double[] MercuryB1B = {3.501698, 3.141593, 0.01515, 0.48540, 3.4294, 0.1605, 3.185, 6.210, 2.95, 0.29, 5.98};
    private static double[] MercuryB1C = {26087.903, 0, 52175.806, 78263.709, 104351.612, 130439.515, 156527.419, 182615.322, 208703.23, 27197.28, 234791.13};

    private static double[] MercuryB2A = {11831, 1914, 1045, 266, 170, 96, 45, 18, 7};
    private static double[] MercuryB2B = {4.79066, 0, 1.2122, 4.434, 1.623, 4.80, 1.61, 4.67, 1.43};
    private static double[] MercuryB2C = {26087.903, 0, 52175.806, 78263.709, 104351.613, 130439.52, 156527.42, 182615.32, 208703.23};

    private static double[] MercuryR0A = {39528272, 7834132, 795526, 121282, 21922, 4354, 918, 290, 260, 202, 201, 142, 100};
    private static double[] MercuryR0B = {0, 6.192337, 2.959897, 6.010642, 2.7782, 5.8289, 2.597, 1.424, 3.028, 5.647, 5.592, 6.253, 3.734};
    private static double[] MercuryR0C = {0, 26087.903, 52175.806, 78263.709, 104351.612, 130439.515, 156527.418, 25028.521, 27197.282, 182615.322, 31749.235, 24978.525, 21535.950};

    private static double[] MercuryR1A = {217348, 44142, 10094, 2433, 1624, 604, 153, 39};
    private static double[] MercuryR1B = {4.656172, 1.42386, 4.47466, 1.2423, 0, 4.293, 1.061, 4.11};
    private static double[] MercuryR1C = {26087.903, 52175.806, 0, 78263.709, 104351.612, 0, 130439.516, 156527.419, 182615.32};

    private static double[] MercuryR2A = {3118, 1245, 425, 136, 42, 22, 13};
    private static double[] MercuryR2B = {3.0823, 6.1518, 2.926, 5.980, 2.75, 3.14, 5.80};
    private static double[] MercuryR2C = {26087.903, 52175.806, 78263.709, 104351.613, 130439.52, 0, 156527.42};

    private static double[] VenusL0A = {317614667, 1353968, 89892, 5477, 3456, 2372, 1664, 1438, 1317, 1201,
            769, 761, 708, 585, 500, 429, 327, 326, 232, 180, 155, 128, 128, 106};
    private static double[] VenusL0B = {0, 5.5931332, 5.3065, 4.4163, 2.6996, 2.9938, 4.2502, 4.1575, 5.1867,
            6.1536, 0.816, 1.95, 1.065, 3.998, 4.123, 3.586, 5.677, 4.591, 3.163, 4.653, 5.570, 4.226,
            0.962, 1.537};
    private static double[] VenusL0C = {0, 10213.285, 20426.571, 7860.4194, 11790.629, 3930.2097, 1577.3435, 9683.5946, 26.2983,
            30639.856, 9437.763, 529.691, 775.523, 191.448, 15720.839, 19367.189, 5507.553, 10404.734,
            9153.904, 1109.379, 19651.048, 20.775, 5661.332, 801.821};

    private static double[] VenusL1A = {1021352943053.0, 95708, 14445, 213, 174, 152, 82, 70, 52, 38, 30, 25};
    private static double[] VenusL1B = {0, 2.46424, 0.51625, 1.795, 2.655, 6.106, 5.7, 2.68, 3.6, 1.03, 1.25, 6.11};
    private static double[] VenusL1C = {0, 10213.285, 20426.571, 30639.857, 26.298, 1577.344, 191.45, 9437.76, 775.52, 529.69, 5507.55, 10404.73};

    private static double[] VenusL2A = {54127, 3891, 1338, 24, 19, 10, 7, 6};
    private static double[] VenusL2B = {0, 0.3451, 2.0201, 2.05, 3.54, 3.97, 1.52, 1};
    private static double[] VenusL2C = {0, 10213.285, 20426.571, 26.3, 30639.86, 775.52, 1577.34, 191.45};


    private static double[] VenusB0A = {5923638, 40108, 32815, 1011, 149, 138, 130, 120, 108};
    private static double[] VenusB0B = {0.2670278, 1.14737, 3.14159, 1.0895, 6.254, 0.86, 3.672, 3.705, 4.539};
    private static double[] VenusB0C = {10213.285, 20426.57109, 0, 30639.8566, 18073.705, 1577.344, 9437.763, 2352.866, 22003.915};

    private static double[] VenusB1A = {513348, 4380, 199, 197};
    private static double[] VenusB1B = {1.803643, 3.3862, 0, 2.53};
    private static double[] VenusB1C = {10213.285, 20426.571, 0, 30639.857};

    private static double[] VenusB2A = {22378, 282, 173, 27};
    private static double[] VenusB2B = {3.38509, 0, 5.256, 3.87};
    private static double[] VenusB2C = {10.213285, 0, 20426.571, 30639.86};

    private static double[] VenusB3A = {647, 20, 6, 3};
    private static double[] VenusB3B = {4.992, 3.14, 0.77, 5.44};
    private static double[] VenusB3C = {10213.286, 0, 20426.57, 30639.86};


    private static double[] VenusR0A = {72334821, 489824, 1658, 1632, 1378, 498, 374, 264, 237, 222, 126, 119};
    private static double[] VenusR0B = {0, 4.021518, 4.9021, 2.8455, 1.1285, 2.587, 1.423, 5.529, 2.551, 2.013, 2.728, 3.020};
    private static double[] VenusR0C = {0, 10213.285, 20426.571, 7860.4194, 11790.6291, 9683.595, 3930.21, 9437.763, 15720.839, 19367.189, 1577.344, 10404.734};

    private static double[] VenusR1A = {34551, 234, 234};
    private static double[] VenusR1B = {0.89199, 1.772, 3.142};
    private static double[] VenusR1C = {10213.285, 20426.571, 0};

    private static double[] VenusR2A = {1407, 16, 13};
    private static double[] VenusR2B = {5.0637, 5.47, 0};
    private static double[] VenusR2C = {10213.285, 20426.571, 0};


    public static double[] EarthL0A = {175347046, 3341656, 34894, 3497, 3418, 3136, 2676, 2343,
            1324, 1273, 1199, 990, 902, 857, 780, 753, 505, 492, 357, 317, 284, 271, 243, 206, 205, 202, 156, 132, 126, 115, 103, 102, 102};
    public static double[] EarthL0B = {0, 4.6692568, 4.6261, 2.7441, 2.8289, 3.6277, 4.4181, 6.1352,
            0.7425, 2.0371, 1.1096, 5.233, 2.045, 3.508, 1.179, 2.533, 4.583, 4.205, 2.920, 5.849, 1.899, 0.315,
            0.345, 4.806, 1.869, 2.458, 0.833, 3.411, 1.083, 0.645, 0.636, 0.976, 4.267};
    public static double[] EarthL0C = {0, 6283.0758, 12566.151, 5753.3849, 3.5231, 77713.771,
            7860.4194, 3930.2097, 11506.7698, 529.691, 1577.3435, 5884.927, 26.298, 398.149, 5223.694, 5507.553,
            18849.228, 775.523, 0.067, 11790.629, 796.298, 10977.079, 5486.778, 2544.314, 5573.143, 6069.777, 213.299, 2942.463,
            20.775, 0.98, 4694.003, 15720.839, 7.114};

    public static double[] EarthL1A = {628331966747.0, 206059, 4303, 425, 119, 109, 93, 72, 68, 67};
    public static double[] EarthL1B = {0, 2.678235, 2.6351, 1.590, 5.796, 2.966, 2.59, 1.14, 1.87, 4.41};
    public static double[] EarthL1C = {0, 6283.0758, 12566.151, 3.523, 26.298, 1577.344, 18849.23, 529.69, 398.15, 5507.55};

    public static double[] EarthL2A = {52919, 8720, 309, 27};
    public static double[] EarthL2B = {0, 1.0721, 0.867, 0.05};
    public static double[] EarthL2C = {0, 6283.0758, 12566.152, 3.52};

    public static double[] EarthL3A = {289};
    public static double[] EarthL3B = {5.844};
    public static double[] EarthL3C = {6283.076};

    public static double[] EarthB0A = {280, 102, 80, 44, 32};
    public static double[] EarthB0B = {3.199, 5.422, 3.88, 3.7, 4};
    public static double[] EarthB0C = {84334.662, 5507.553, 5223.69, 2352.87, 1577.34};

    public static double[] EarthR0A = {100013989, 1670700, 13956, 3084, 1628, 1576, 925, 542, 472, 346, 329, 307, 243, 212, 186, 175, 110, 98};
    public static double[] EarthR0B = {0, 3.0984635, 3.05525, 5.1985, 1.1739, 2.8469, 5.453, 4.564, 3.661, 0.964, 5.9, 0.299, 4.273, 5.847, 5.022, 3.012, 5.055, 0.89};
    public static double[] EarthR0C = {0, 6283.0758, 12566.151, 77713.771, 5753.385, 7860.4194, 11506.77, 3930.21, 5884.927, 5507.553, 5223.694, 5573.143, 11790.629, 1577.344, 10977.079, 18849.228, 5486.778, 6069.78};

    public static double[] EarthR1A = {103019, 1721, 702};
    public static double[] EarthR1B = {1.107490, 1.0644, 3.142};
    public static double[] EarthR1C = {6283.0758, 12566.151, 0};

    public static double[] EarthR2A = {4359, 124};
    public static double[] EarthR2B = {5.7846, 5.579};
    public static double[] EarthR2C = {6283.0758, 12566.152};

    private static double[] MarsL0A = {620347710, 18656368.1, 1108216.792, 91798.394, 27744.987, 10610.23, 12315.897, 8926.772, 8715.688, 6797.552, 7774.867,
            3575.079, 4161.101, 3075.25, 2628.122, 2937.543, 2389.42, 2579.842, 1528.14, 1798.808, 1264.356, 1286.232, 1546.408, 1024.907, 891.567, 858.76, 832.718,
            832.724, 712.899, 748.724, 723.863, 635.557, 655.163, 550.472, 552.746, 425.972, 415.132, 472.164, 306.552, 312.141, 293.199, 302.377, 274.028, 281.073,
            231.185, 283.6, 236.114, 274.035, 299.396, 204.161, 238.857, 188.639, 221.225, 179.196, 172.11, 193.126, 144.305, 160.011, 174.068, 130.993, 138.245,
            128.062, 139.897, 128.102, 116.945, 110.375, 113.486, 100.09, 104.541};

    private static double[] MarsL0B = {0, 5.0503710, 5.4009983, 5.75478745111, 5.97049512942, 2.93958524973, 0.84956081238, 4.15697845939, 6.11005159792,
            0.36462243626, 3.33968655074, 1.66186540141, 0.2281497533, 0.85696597082, 0.6480614357, 6.07893711408, 5.03896401349, 0.02996706197, 1.14979306228, 0.65634026844,
            3.62275092231, 3.06795924626, 2.91579633392, 3.69334293555, 0.1829389909, 2.40093704204, 2.46418591282, 4.49495753458, 3.66336014788, 3.82248399468,
            0.67497565801, 2.92182704275, 0.48864075176, 3.81001205408, 4.47478863016, 0.55365138172, 0.49662314774, 3.6254781941, 0.38052862973, 0.99853322843,
            4.22131277914, 4.48618150321, 0.54222141841, 5.88163372945, 1.28240685294, 5.76885494123, 5.75504515576, 0.13372501211, 2.78323705697, 2.82133266185,
            5.37155471672, 1.49103016486, 3.50466672203, 1.00561112574, 0.43943041719, 3.35715137745, 1.41874193418, 3.94854735192, 2.41360332576, 4.04491720264,
            4.30145176915, 1.80665643332, 3.32592516164, 2.20806651008, 3.12805282207, 1.05195079687, 3.70070798123, 3.24343740861, 0.78535382076};

    private static double[] MarsL0C = {0, 3340.6124266998, 6681.2248533996, 10021.8372800994, 3.523118349, 2281.2304965106, 2810.9214616052, 0.0172536522, 13362.4497067992,
            398.1490034082, 5621.8429232104, 2544.3144198834, 2942.4634232916, 191.4482661116, 3337.0893083508, 0.0673103028, 796.2980068164, 3344.1355450488, 6151.533888305,
            529.6909650946, 5092.1519581158, 2146.1654164752, 1751.539531416, 8962.4553499102, 16703.062133499, 2914.0142358238, 3340.5951730476, 3340.629680352,
            1059.3819301892, 155.4203994342, 3738.761430108, 8432.7643848156, 3127.3133312618, 0.9803210682, 1748.016413067, 6283.0758499914, 213.299095438,
            1194.4470102246, 6684.7479717486, 6677.7017350506, 20.7753954924, 3532.0606928114, 3340.545116397, 1349.8674096588, 3870.3033917944, 3149.1641605882,
            3333.498879699, 3340.6797370026, 6254.6266625236, 1221.8485663214, 4136.9104335162, 9492.1463150048, 382.8965322232, 951.7184062506, 5486.777843175,
            3.5904286518, 135.0650800354, 4562.4609930212, 553.5694028424, 12303.06777661, 7.1135470008, 5088.6288397668, 2700.7151403858, 1592.5960136328,
            7903.073419721, 242.728603974, 1589.0728952838, 11773.3768115154, 8827.3902698748};

    private static double[] MarsL1A = {3.3408562e11, 1458227.051, 164901.343, 19963.338, 3452.399, 2485.48, 841.551, 537.566, 521.041, 432.614, 429.656, 381.747, 314.129,
            282.804, 205.664, 168.805, 157.587, 133.686, 116.561, 117.591, 113.595, 133.563, 91.098};
    private static double[] MarsL1B = {0, 3.60426053609, 3.92631250962, 4.2659406103, 4.73210386365, 4.61277567318, 4.45858256765, 5.01589727492, 4.99422678175,
            2.5606640286, 5.31646162367, 3.53881289437, 4.96335266049, 3.15967518204, 4.5689145566, 1.32894813366, 4.18501035954, 2.23325104196, 2.21347652545,
            6.02407213861, 5.42803224317, 5.97421903927, 1.09627836591};
    private static double[] MarsL1C = {0, 3340.6124266998, 6681.2248533996, 10021.8372800994, 3.523118349, 13362.4497067992, 2281.2304965106, 398.1490034082, 3344.1355450488,
            191.4482661116, 155.4203994342, 796.2980068164, 16703.062133499, 2544.3144198834, 2146.1654164752, 3337.0893083508, 1751.539531416, 0.9803210682, 1059.3819301892,
            6151.533888305, 3738.761430108, 1748.016413067, 1349.8674096588};

    private static double[] MarsL2A = {58015.791, 54187.645, 13908.426, 2465.104, 398.379, 222.022};
    private static double[] MarsL2B = {2.04979463279, 0, 2.45742359888, 2.80000020929, 3.14118428289, 3.19436080019};
    private static double[] MarsL2C = {3340.6124266998, 0, 6681.2248533996, 10021.8372800994, 13362.4497067992, 3.523118349};

    private static double[] MarsL3A = {1482.423, 662.095, 188.268};
    private static double[] MarsL3B = {0.44434694876, 0.88469178686, 1.28799982497};
    private static double[] MarsL3C = {3340.6124266998, 6681.2248533996, 10021.8372800994};

    private static double[] MarsB0A = {3197134.986, 298033.234, 289104.742, 31365.538, 3484.1, 442.999, 443.401, 399.109, 292.506, 181.982, 163.159, 159.678, 139.323, 149.297, 142.686, 142.685, 82.544};
    private static double[] MarsB0B = {3.76832042432, 4.10616996243, 0, 4.44651052853, 4.78812547889, 5.65233015876, 5.02642620491, 5.130568147, 3.79290644595,
            6.13648011704, 4.26399626634, 2.23194610246, 2.41796344238, 2.16501209917, 1.1821501611, 3.2129218082, 5.36667872319};
    private static double[] MarsB0C = {3340.6124266998, 6681.2248533996, 0, 10021.8372800994, 13362.4497067992, 3337.0893083508, 3344.1355450488,
            16703.062133499, 2281.2304965106, 6151.533888305, 529.6909650946, 1059.3819301892, 8962.4553499102, 5621.8429232104, 3340.5951730476, 3340.629680352, 6684.7479717486};

    private static double[] MarsB1A = {350068.845, 14116.03, 9670.755, 1471.918, 425.864, 102.039};
    private static double[] MarsB1B = {5.36847836211, 3.14159265359, 5.47877786506, 3.20205766795, 3.40843812875, 0.77617286189};
    private static double[] MarsB1C = {3340.6124266998, 0, 6681.2248533996, 10021.8372800994, 13362.4497067992, 3337.0893083508};

    private static double[] MarsB2A = {16726.69, 4986.799, 302.141};
    private static double[] MarsB2B = {0.60221392419, 3.14159265359, 5.55871276021};
    private static double[] MarsB2C = {3340.6124266998, 0, 6681.2248533996};

    private static double[] MarsR0A = {153033488.276, 14184953.153, 660776.357, 46179.117, 8109.738, 7485.315, 5523.193, 3825.16, 2306.539,
            1999.399, 2484.385, 1960.198, 1167.115, 1102.828, 899.077, 992.252, 807.348, 797.91, 740.98, 692.34, 633.144, 725.583, 633.14, 574.352,
            526.187, 629.976, 472.776, 348.095, 283.702, 279.552, 233.827, 219.428, 269.891, 208.333, 275.224, 275.501, 239.133, 223.19, 182.686,
            186.213, 175.995, 178.613, 208.336, 228.128, 144.286, 163.534, 133.12, 141.759, 114.941, 118.781, 102.096, 128.555, 111.538};
    private static double[] MarsR0B = {0, 3.47971283519, 3.81783442097, 4.15595316284, 5.55958460165, 1.77238998069, 1.3643631888, 4.49407182408,
            0.09081742493, 5.36059605227, 4.92545577893, 4.74249386323, 2.11261501155, 5.0090826416, 4.40790433994, 5.83862401067,
            2.10216647104, 3.44839026172, 1.49906336892, 2.13378814785, 0.89353285018, 1.24516913473, 2.92430448169, 0.82896196337, 5.38292276228,
            1.28738135858, 5.19850457873, 4.83219198908, 2.90692294913, 5.25749247548, 5.10546492529, 5.58340248784, 3.76394728622, 5.25476080773, 2.90818883832, 1.21767967781,
            2.03669896238, 4.19861593779, 5.08062683355, 5.69871555748, 5.95341786369, 4.18423025538, 4.84626442122, 3.2552902062, 0.21296012258, 3.79889068111, 1.5391010671,
            2.47790321309, 4.31745088059, 2.12178071222, 6.18138550087, 5.49883294915, 0.55339169625};
    private static double[] MarsR0C = {0, 3340.6124266998, 6681.2248533996, 10021.8372800994, 2810.9214616052, 5621.8429232104, 2281.2304965106, 13362.4497067992, 2544.3144198834,
            3337.0893083508, 2942.4634232916, 3344.1355450488, 5092.1519581158, 398.1490034082, 529.6909650946, 6151.533888305, 1059.3819301892, 796.2980068164, 2146.1654164752,
            8962.4553499102, 3340.5951730476, 8432.7643848156, 3340.629680352, 2914.0142358238, 3738.761430108, 1751.539531416, 3127.3133312618, 16703.062133499, 3532.0606928114,
            6283.0758499914, 5486.777843175, 191.4482661116, 5884.9268465832, 3340.545116397, 1748.016413067, 6254.6266625236, 1194.4470102246, 3149.1641605882, 6684.7479717486,
            6677.7017350506, 3870.3033917944, 3333.498879699, 3340.6797370026, 6872.6731195112, 5088.6288397668, 4136.9104335162, 7903.073419721, 4562.4609930212, 1349.8674096588,
            1589.0728952838, 9492.1463150048, 8827.3902698748, 11243.6858464208};

    private static double[] MarsR1A = {1107433.34, 103175.886, 12877.2, 10815.88, 1194.55, 438.579, 395.698, 182.572, 135.85, 128.204, 127.068, 118.443, 128.362, 87.537};
    private static double[] MarsR1B = {2.0325052495, 2.37071845682, 0, 2.70888093803, 3.04702182503, 2.88835072628, 3.42324611291, 1.58428644001, 3.38507017993, 0.6299122057,
            1.9538977574, 2.99761345074, 6.04343360441, 3.42052758979};
    private static double[] MarsR1C = {3340.6124266998, 6681.2248533996, 0, 10021.8372800994, 13362.4497067992, 2281.2304965106, 3344.1355450488, 2544.3144198834,
            16703.062133499, 1059.3819301892, 796.2980068164, 2146.1654164752, 3337.0893083508, 398.1490034082};

    private static double[] MarsR2A = {44242.247, 8138.042, 1274.915, 187.387};
    private static double[] MarsR2B = {0.47930603943, 0.86998398093, 1.22594050809, 1.57298991982};
    private static double[] MarsR2C = {3340.6124266998, 6681.2248533996, 10021.8372800994, 13362.4497067992};

    private static double[] MarsR3A = {1113.107, 424.446, 100.044};
    private static double[] MarsR3B = {5.14987350142, 5.61343766478, 5.99726827028};
    private static double[] MarsR3C = {3340.6124266998, 6681.2248533996, 10021.8372800994};

    private static double[] JupiterL0A = {59954691.495, 9695898.711, 573610.145, 306389.18, 97178.28, 72903.096, 64263.986, 39806.051, 38857.78, 27964.622, 13589.738, 8246.362, 8768.686, 7368.057, 6263.171, 6114.05, 4905.419, 5305.283, 5305.457,
            4647.249, 3045.009, 2610.001, 2028.191, 1764.768, 1722.983, 1920.959, 1633.217, 1431.997, 973.278, 884.439, 732.875, 731.072, 691.928, 709.19, 614.464, 495.224, 581.902, 375.657, 389.864, 341.006, 330.458, 440.854, 417.266, 244.17, 261.54, 256.568,
            261.009, 220.382, 201.996, 207.327, 197.046, 235.141, 174.809, 149.368, 175.184, 175.191, 157.909, 137.871, 117.495, 150.502, 116.757, 105.895, 130.531, 141.445, 99.511};
    private static double[] JupiterL0B = {0, 5.06191793105, 1.44406205976, 5.41734729976, 4.14264708819, 3.64042909255, 3.41145185203, 2.29376744855, 1.2723172486, 1.78454589485, 5.7748103159, 3.58227961655, 3.63000324417, 5.08101125612, 0.02497643742,
            4.51319531666, 1.32084631684, 1.30671236848, 4.18625053495, 4.69958109497, 4.31675960318, 1.5666759485, 1.06376547379, 2.14148077766, 3.88036008872, 0.97168928755, 3.58201089758, 4.29683690269, 4.09764957065, 2.43701426123, 6.08534113239,
            3.80591233956, 6.13368222939, 1.29272573658, 4.10853496756, 3.75567461379, 4.53967717552, 4.70299124833, 4.89716105852, 5.71452525783, 4.74049819491, 2.95818460943, 1.03554430161, 5.220208789, 1.87652461032, 3.72410724159,
            0.82047246448, 1.65115015995, 1.80684574186, 1.85461666594, 5.29252149016, 1.22693908124, 5.90973505276, 4.37745104275, 3.22634903433, 3.72966554761, 4.36483921766, 1.31797920785, 2.5002214089, 3.90625022622, 3.38920921041, 4.55439798236,
            4.16867945489, 3.13568357861, 1.42117395747};
    private static double[] JupiterL0C = {0, 529.6909650946, 7.1135470008, 1059.3819301892, 632.7837393132, 522.5774180938, 103.0927742186, 419.4846438752, 316.3918696566, 536.8045120954, 1589.0728952838, 206.1855484372, 949.1756089698,
            735.8765135318, 213.299095438, 1162.4747044078, 110.2063212194, 14.2270940016, 1052.2683831884, 3.9321532631, 426.598190876, 846.0828347512, 3.1813937377, 1066.49547719, 1265.5674786264, 639.897286314, 515.463871093, 625.6701923124,
            95.9792272178, 412.3710968744, 838.9692877504, 1581.959348283, 2118.7638603784, 742.9900605326, 1478.8665740644, 323.5054166574, 309.2783226558, 1368.660252845, 1692.1656695024, 533.6231183577, 0.0481841098, 454.9093665273, 2.4476805548,
            728.762966531, 0.9632078465, 199.0720014364, 380.12776796, 543.9180590962, 1375.7737998458, 525.7588118315, 1155.361157407, 909.8187330546, 956.2891559706, 1685.0521225016, 1898.3512179396, 942.062061969, 1795.258443721, 1169.5882514086,
            1596.1864422846, 74.7815985673, 0.5212648618, 526.5095713569, 1045.1548361876, 491.5579294568, 532.8723588323};

    private static double[] JupiterL1A = {5.2993481e10, 489741.194, 228918.538, 27655.38, 20720.943, 12105.732, 6068.051, 5433.924, 4237.795, 2211.854, 1295.769, 1745.919, 1163.411, 1007.216, 1173.129, 847.678, 827.329, 1003.574, 1098.735, 816.397, 725.447, 567.845,
            474.181, 412.93, 335.817, 345.249, 234.066, 194.784, 234.34, 183.938, 198.525, 186.899, 171.38, 130.771, 107.575, 115.393, 115.047};

    private static double[] JupiterL1B = {0, 4.22066689928, 6.02647464016, 4.57265956824, 5.45938936295, 0.16985765041, 4.42419502005, 3.98478382565, 5.89009351271, 5.26771446618, 5.55132765087, 4.92669378486, 0.51450895328, 0.46478398551, 5.8564730435,
            5.7580585045, 4.80312015734, 3.15040301822, 5.30704981594, 0.58643054886, 5.51827471473, 5.98867049451, 4.13245269168, 5.73652891261, 3.73248749046, 4.2415956541, 6.24302226646, 2.21879010911, 4.03469970332, 6.27963588822, 1.50458442825,
            6.08620565908, 5.41655983845, 0.62643377351, 4.49282760117, 0.68019050174, 5.28641699144};
    private static double[] JupiterL1C = {0, 529.6909650946, 7.1135470008, 1059.3819301892, 522.5774180938, 536.8045120954, 103.0927742186, 419.4846438752, 14.2270940016, 206.1855484372, 3.1813937377, 1589.0728952838, 3.9321532631, 735.8765135318,
            1052.2683831884, 110.2063212194, 213.299095438, 426.598190876, 515.463871093, 1066.49547719, 639.897286314, 625.6701923124, 412.3710968744, 95.9792272178, 1162.4747044078, 632.7837393132, 309.2783226558, 323.5054166574, 949.1756089698,
            543.9180590962, 838.9692877504, 742.9900605326, 199.0720014364, 728.762966531, 956.2891559706, 846.0828347512, 2118.7638603784};

    private static double[] JupiterL2A = {47233.598, 30629.053, 38965.55, 3189.317, 2723.358, 2729.292, 1721.069, 383.258, 367.498, 377.524, 337.386, 308.2, 218.408, 198.883, 197.445, 146.23, 155.862, 129.57, 141.932};
    private static double[] JupiterL2B = {4.32148323554, 2.93021440216, 0, 1.05504615595, 3.41411526638, 4.84545481351, 4.18734385158, 5.76790714387, 6.05509120409, 0.76048964872, 3.78644384244, 0.69356654052, 3.81389191353, 5.33996443444,
            2.48356402053, 3.81373196838, 1.40642426467, 5.83738872525, 1.63435169016};
    private static double[] JupiterL2C = {7.1135470008, 529.6909650946, 0, 522.5774180938, 1059.3819301892, 536.8045120954, 14.2270940016, 419.4846438752, 103.0927742186, 515.463871093, 3.1813937377, 206.1855484372, 1589.0728952838, 1066.49547719,
            3.9321532631, 639.897286314, 1052.2683831884, 412.3710968744, 426.598190876};

    private static double[] JupiterB0A = {2268615.703, 109971.634, 110090.358, 8101.427, 6043.996, 6437.782, 1106.88, 941.651, 894.088, 767.28, 944.328, 684.22, 629.223, 835.861, 531.67, 558.524, 464.449, 431.072, 351.433, 123.148, 115.038, 132.16,
            103.402, 116.379, 102.42, 103.762};
    private static double[] JupiterB0B = {3.55852606718, 3.90809347389, 0, 3.60509573368, 4.25883108794, 0.30627121409, 2.98534421928, 2.93619072405, 1.75447429921, 2.1547359406, 1.67522288396, 3.67808770098, 0.64343282328,
            5.17881973234, 2.70305954352, 0.01354830508, 1.17337249185, 2.60825000494, 4.61062990714, 3.34968181384, 5.04892295442, 4.7781699067, 2.31878999565, 1.38688232033, 3.15293785436, 3.7010383811};
    private static double[] JupiterB0C = {529.6909650946, 1059.3819301892, 0, 522.5774180938, 1589.0728952838, 536.8045120954, 1162.4747044078, 1052.2683831884, 7.1135470008, 632.7837393132, 426.598190876, 213.299095438, 1066.49547719, 103.0927742186, 110.2063212194, 846.0828347512, 949.1756089698, 419.4846438752, 2118.7638603784, 1692.1656695024, 316.3918696566, 742.9900605326, 1478.8665740644, 323.5054166574, 1581.959348283, 515.463871093};

    private static double[] JupiterB1A = {177351.787, 3230.171, 3081.364, 2211.914, 1694.232, 346.445, 234.264, 196.154, 150.468, 114.128};
    private static double[] JupiterB1B = {5.70166488486, 5.7794161934, 5.47464296527, 4.73477480209, 3.14159265359, 4.74595174109, 5.18856099929, 6.18554286642, 3.92721226087, 3.4389727183};
    private static double[] JupiterB1C = {529.6909650946, 1059.3819301892, 522.5774180938, 536.8045120954, 0, 1052.2683831884, 1066.49547719, 7.1135470008, 1589.0728952838, 632.7837393132};

    private static double[] JupiterB2A = {8094.051, 742.415, 813.244, 398.951, 342.226};
    private static double[] JupiterB2B = {1.46322843658, 0.95691639003, 3.14159265359, 2.89888666447, 1.44683789727};
    private static double[] JupiterB2C = {529.6909650946, 522.5774180938, 0, 536.8045120954, 1059.3819301892};

    private static double[] JupiterR0A = {520887429.471, 25209327.02, 610599.902, 282029.465, 187647.391, 86792.941, 72062.869, 65517.227, 29134.62, 30135.275, 23453.209, 22283.71, 23947.34,
            13032.6, 9703.346, 12749.004, 9161.431, 7894.539, 7057.978, 6137.755, 5477.093, 3502.519, 4136.89, 4170.012, 2499.966, 2616.955, 1911.876, 2127.644, 1610.549, 1479.484, 1230.708, 1216.81,
            961.072, 885.708, 776.7, 998.579, 1014.959, 727.162, 655.289, 821.465, 620.798, 653.981, 812.036, 562.12, 542.221, 457.859};
    private static double[] JupiterR0B = {0, 3.49108640015, 3.84115365602, 2.57419879933, 2.07590380082, 0.71001090609, 0.21465694745, 5.97995850843, 1.6775924371, 2.16132058449, 3.54023147303,
            4.19362773546, 0.27457854894, 2.96043055741, 1.90669572402, 2.71550102862, 4.41352618935, 2.47907551404, 2.18184753111, 6.26417542514, 5.65729325169, 0.56531297394, 2.72219979684,
            2.01605033912, 4.55182055941, 2.00993967129, 0.85621927419, 6.1275146175, 3.08867789275, 2.68026191372, 1.89042979701, 1.80171561024, 4.54876989805, 4.14785948471, 3.6769695469,
            2.8720894011, 1.38673237666, 3.98824686402, 2.79065604219, 1.59342534396, 4.82284338962, 3.38150775269, 5.94091899141, 0.08095987241, 0.28360266386, 0.1272269451};

    private static double[] JupiterR0C = {0, 529.6909650946, 1059.3819301892, 632.7837393132, 522.5774180938, 419.4846438752, 536.8045120954, 316.3918696566, 103.0927742186, 949.1756089698,
            735.8765135318, 1589.0728952838, 7.1135470008, 1162.4747044078, 206.1855484372, 1052.2683831884, 213.299095438, 426.598190876, 1265.5674786264, 846.0828347512, 639.897286314,
            1066.49547719, 625.6701923124, 515.463871093, 838.9692877504, 1581.959348283, 412.3710968744, 742.9900605326, 1368.660252845, 1478.8665740644, 323.5054166574, 110.2063212194,
            2118.7638603784, 533.6231183577, 728.762966531, 309.2783226558, 454.9093665273, 1155.361157407, 1685.0521225016, 1898.3512179396, 956.2891559706, 1692.1656695024, 909.8187330546,
            543.9180590962, 525.7588118315, 1375.7737998458};

    private static double[] JupiterR1A = {1271801.596, 61661.771, 53443.592, 31185.167, 41390.257, 11847.19, 9166.36, 3175.763, 3203.446, 3403.605, 2600.003, 2412.207, 2806.064, 2676.575,
            2100.507, 1646.182, 1641.257, 1049.866, 1024.802, 740.996, 806.404, 676.928, 468.895, 444.683, 567.076, 415.894, 484.689, 337.555, 401.738, 347.378, 260.753, 220.084, 203.217, 246.603,
            183.504, 180.134, 197.134, 196.005, 200.19, 170.225, 146.335, 133.483, 132.076, 123.851, 121.861, 115.313, 98.527, 91.608, 110.638};
    private static double[] JupiterR1B = {2.64937511122, 3.00076251018, 3.89717644226, 4.88276663526, 0, 2.41329588176, 4.75979408587, 2.79297987071, 5.21083285476, 3.34688537997,
            3.63435101622, 1.46947308304, 3.7422369358, 4.33052878699, 3.92762682306, 5.30953510947, 4.41628669824, 3.16113622955, 2.55432643018, 2.17094630558, 2.6775080138, 6.2495347979,
            4.70973463481, 0.40281181402, 4.57655414712, 5.36836018215, 2.46882793186, 3.1678195112, 4.60528841541, 4.68148808722, 5.34290306101, 4.84210964963, 5.59995425432, 3.92313823537,
            4.26526769703, 4.40165491159, 3.70551461394, 3.75877587139, 4.43888814441, 4.84647488867, 6.12958365535, 1.32245735855, 4.51187950811, 2.04290370696, 4.40581788491, 4.46741278152,
            5.72833991647, 4.52965592121, 3.62504147403};
    private static double[] JupiterR1C = {529.6909650946, 1059.3819301892, 522.5774180938, 536.8045120954, 0, 419.4846438752, 7.1135470008, 103.0927742186, 735.8765135318, 1589.0728952838,
            206.1855484372, 426.598190876, 515.463871093, 1052.2683831884, 639.897286314, 1066.49547719, 625.6701923124, 213.299095438, 412.3710968744, 1162.4747044078, 632.7837393132, 838.9692877504,
            543.9180590962, 323.5054166574, 742.9900605326, 728.762966531, 949.1756089698, 956.2891559706, 309.2783226558, 14.2270940016, 846.0828347512, 1368.660252845, 1155.361157407, 942.062061969,
            95.9792272178, 532.8723588323, 2118.7638603784, 199.0720014364, 1045.1548361876, 526.5095713569, 533.6231183577, 110.2063212194, 525.7588118315, 1478.8665740644, 1169.5882514086, 1581.959348283,
            1596.1864422846, 1685.0521225016, 1272.6810256272};

    private static double[] JupiterR2A = {79644.833, 8251.618, 7029.864, 5314.006, 1860.833, 836.267, 964.466, 406.453, 426.57, 377.316, 497.92};
    private static double[] JupiterR2B = {1.35865896596, 5.77773935444, 3.27476965833, 1.83835109712, 2.97682139367, 4.19889881718, 5.48031822015, 3.78250730354, 2.22753101795, 2.24248352873, 3.14159265359};
    private static double[] JupiterR2C = {529.6909650946, 522.5774180938, 536.8045120954, 1059.3819301892, 7.1135470008, 419.4846438752, 515.463871093, 1066.49547719, 639.897286314, 1589.0728952838, 0};

    private static double[] SaturnL0A = {87401354.029, 11107659.78, 1414150.958, 398379.386, 350769.223, 206816.296, 79271.288, 23990.338, 16573.583, 14906.995, 15820.3, 14609.562, 13160.308, 15053.509, 13005.305,
            10725.066, 5863.207, 5227.771, 6126.308, 5019.658, 4592.541, 4005.862, 2953.815, 3873.696, 2461.172, 3269.49, 1758.143, 1640.183, 1391.336, 1580.641, 1123.515, 1017.258, 848.643, 1087.237, 956.752, 789.205, 686.965,
            654.47, 748.811, 633.98, 743.584, 852.677, 579.857, 624.904, 529.861, 542.643, 474.279, 448.542, 546.358, 478.054, 354.944, 451.827, 347.413, 343.475, 309.001, 322.185, 372.308, 321.543, 330.196, 249.116, 286.688, 220.225,
            277.775, 204.5, 207.663, 208.655, 182.454, 226.609, 207.659, 173.914, 184.69, 183.511, 146.068, 164.541, 147.526, 139.666, 131.283, 117.283, 149.299, 122.373, 113.747, 102.702, 118.156, 109.275, 110.399, 124.969, 89.949,
            103.956, 112.437, 106.57, 91.43, 83.791, 83.461, 96.987, 100.631};
    private static double[] SaturnL0B = {0, 3.96205090194, 4.58581515873, 0.52112025957, 3.30329903015, 0.24658366938, 3.8400707853, 4.6697693486, 0.43719123541, 5.76903283845, 0.9380895376, 1.56518573691, 4.44891180176,
            2.71670027883, 5.98119067061, 3.12939596466, 0.23657028777, 4.2078316238, 1.76328499656, 3.17787919533, 0.61976424374, 2.24479893937, 0.98280385206, 3.22282692566, 2.03163631205, 0.77491895787, 3.26580514774,
            5.50504966218, 4.02331978116, 4.3726631412, 2.83726793572, 3.71698151814, 3.19149825839, 4.18343232481, 0.50740889886, 5.00745123149, 1.74714407827, 1.59889331515, 2.14398149298, 2.29889903023, 5.25276954625,
            3.42141350697, 3.09259007048, 0.97046831256, 4.44938897119, 1.51824320514, 5.47527185987, 1.28990416161, 2.12678554211, 2.96488054338, 3.0128648303, 1.04436664241, 1.53928227764, 0.24604039134, 3.49486734909,
            0.96137456104, 2.27819108625, 2.57182354537, 0.24715617844, 1.47010534421, 2.37043745859, 4.20422424873, 0.40020408926, 6.010822066, 0.48349820488, 1.34516255304, 5.49122292426, 4.91003163138, 1.283022189,
            1.86305806814, 3.50344404958, 0.97254952728, 6.23102544071, 0.4400551752, 1.53529320509, 4.29450260069, 4.06828961903, 2.67920400584, 5.73594349789, 1.97588777199, 5.59427544714, 1.19748124058, 5.340729339,
            3.43812715686, 0.1660402409, 6.27737805832, 5.80392934702, 2.19210363069, 1.10502663534, 4.01156608514, 1.8752157751, 5.48810655641, 2.28972767279, 4.53666595763, 4.96513666539};
    private static double[] SaturnL0C = {0, 213.299095438, 7.1135470008, 206.1855484372, 426.598190876, 103.0927742186, 220.4126424388, 110.2063212194, 419.4846438752, 316.3918696566, 632.7837393132,
            3.9321532631, 14.2270940016, 639.897286314, 11.0457002639, 202.2533951741, 529.6909650946, 3.1813937377, 277.0349937414, 433.7117378768, 199.0720014364, 63.7358983034, 95.9792272178, 138.5174968707,
            735.8765135318, 949.1756089698, 522.5774180938, 846.0828347512, 323.5054166574, 309.2783226558, 415.5524906121, 227.5261894396, 209.3669421749, 2.4476805548, 1265.5674786264, 0.9632078465, 1052.2683831884,
            0.0481841098, 853.196381752, 412.3710968744, 224.3447957019, 175.1660598002, 74.7815985673, 210.1177017003, 117.3198682202, 9.5612275556, 742.9900605326, 127.4717966068, 350.3321196004, 137.0330241624, 838.9692877504,
            490.3340891794, 340.7708920448, 0.5212648618, 216.4804891757, 203.7378678824, 217.2312487011, 647.0108333148, 1581.959348283, 1368.660252845, 351.8165923087, 200.7689224658, 211.8146227297, 265.9892934775,
            1162.4747044078, 625.6701923124, 2.9207613068, 12.5301729722, 39.3568759152, 0.7507595254, 149.5631971346, 4.192785694, 195.1398481733, 5.4166259714, 5.6290742925, 21.3406410024, 10.2949407385, 1155.361157407,
            52.6901980395, 4.665866446, 1059.3819301892, 1685.0521225016, 554.0699874828, 536.8045120954, 1.4844727083, 1898.3512179396, 114.1384744825, 88.865680217, 191.2076949102, 956.2891559706, 38.1330356378, 0.1118745846,
            628.8515860501, 302.164775655, 269.9214467406};

    private static double[] SaturnL1A = {2.1354295e10, 1296855.005, 564347.566, 98323.03, 107678.77, 40254.586, 19941.734, 10511.706, 6939.233, 4803.325, 4056.325, 3768.63, 3384.684, 3302.2, 3071.382, 1953.036, 1249.348,
            921.683, 705.587, 649.654, 627.603, 486.843, 468.377, 478.501, 417.01, 407.63, 343.826, 339.724, 335.936, 331.933, 352.489, 289.429, 265.801, 230.493, 280.911, 191.667, 172.891, 167.131, 136.328, 131.364, 127.838, 108.862};
    private static double[] SaturnL1B = {0, 1.82820544701, 2.88500136429, 1.08070061328, 2.27769911872, 2.0412825709, 1.27954662736, 2.748803928, 0.40493079985, 2.44194097666, 2.92166618776, 3.6496563146, 2.41694251653,
            1.26256486715, 2.3273931775, 3.563946833, 2.62803737519, 1.9608983425, 4.4168924933, 6.17418093659, 6.11088227167, 6.03998200305, 4.61707843907, 4.98776987984, 2.11708169277, 1.29949556676, 3.95854178574, 3.63396398752,
            3.77173072712, 2.86077699882, 2.31707079463, 2.73263080235, 0.54344631312, 1.64428879621, 5.74398845416, 2.96512946582, 4.07695221044, 2.59745202658, 2.28580246629, 3.44108355646, 4.09533471247, 6.16141072262};
    private static double[] SaturnL1C = {0, 213.299095438, 7.1135470008, 426.598190876, 206.1855484372, 220.4126424388, 103.0927742186, 14.2270940016, 639.897286314, 419.4846438752, 110.2063212194, 3.9321532631, 3.1813937377,
            433.7117378768, 199.0720014364, 11.0457002639, 95.9792272178, 227.5261894396, 529.6909650946, 202.2533951741, 309.2783226558, 853.196381752, 63.7358983034, 522.5774180938, 323.5054166574, 209.3669421749, 412.3710968744,
            316.3918696566, 735.8765135318, 210.1177017003, 632.7837393132, 117.3198682202, 647.0108333148, 216.4804891757, 2.4476805548, 224.3447957019, 846.0828347512, 21.3406410024, 10.2949407385, 742.9900605326, 217.2312487011,
            415.5524906121};

    private static double[] SaturnL2A = {116441.181, 91920.844, 90592.251, 15276.909, 10631.396, 10604.979, 4265.368, 1215.527, 1164.684, 1081.967, 1020.079, 1044.754, 633.582, 549.329, 456.914, 425.1, 273.739, 161.571, 129.494,
            117.008, 105.415, 100.967};
    private static double[] SaturnL2B = {1.17987850633, 0.07425261094, 0, 4.06492007503, 0.25778277414, 5.40963595885, 1.0459555663, 2.91860042123, 4.60942128971, 5.6913035167, 0.63369182642, 4.04206453611, 4.38825410036,
            5.57303134242, 1.26840971349, 0.20935499279, 4.28841011784, 1.3813914942, 1.5658688417, 3.88120915956, 4.90003203599, 0.892704931};
    private static double[] SaturnL2C = {7.1135470008, 213.299095438, 0, 206.1855484372, 220.4126424388, 426.598190876, 14.2270940016, 103.0927742186, 639.897286314, 433.7117378768, 3.1813937377, 199.0720014364, 419.4846438752,
            3.9321532631, 110.2063212194, 227.5261894396, 95.9792272178, 11.0457002639, 309.2783226558, 853.196381752, 647.0108333148, 21.3406410024};

    private static double[] SaturnB0A = {4330678.04, 240348.303, 84745.939, 30863.357, 34116.063, 14734.07, 9916.668, 6993.564, 4807.587, 4788.392, 3432.125, 1506.129, 1060.298, 969.071, 942.05, 707.645, 552.313, 399.675, 316.063,
            319.38, 284.494, 314.225, 236.442, 215.354, 208.522, 178.958, 207.213, 139.14, 134.884, 140.585, 121.669, 139.24, 115.524, 114.218};
    private static double[] SaturnB0B = {3.60284428399, 2.8523848939, 0, 3.48441504465, 0.57297307844, 2.1184659787, 5.79003189405, 4.73604689179, 5.43305315602, 4.9651292742, 2.73255752123, 6.01304536144, 5.63099292414,
            5.20434966103, 1.39646678088, 3.80302329547, 5.13149109045, 3.35891413961, 1.99716764199, 3.6257155098, 4.88648481625, 0.4651027241, 2.13887472281, 5.94982610103, 2.12003893769, 2.95361514672, 0.73021462851,
            1.9982199094, 5.24500819605, 0.64417620299, 3.11537140876, 4.59535168021, 3.10891547171, 0.96261442133};
    private static double[] SaturnB0C = {213.299095438, 426.598190876, 0, 220.4126424388, 206.1855484372, 639.897286314, 419.4846438752, 7.1135470008, 316.3918696566, 110.2063212194, 433.7117378768, 103.0927742186,
            529.6909650946, 632.7837393132, 853.196381752, 323.5054166574, 202.2533951741, 227.5261894396, 647.0108333148, 209.3669421749, 224.3447957019, 217.2312487011, 11.0457002639, 846.0828347512, 415.5524906121,
            63.7358983034, 199.0720014364, 735.8765135318, 742.9900605326, 490.3340891794, 522.5774180938, 14.2270940016, 216.4804891757, 210.1177017003};

    private static double[] SaturnB1A = {397554.998, 49478.641, 18571.607, 14800.587, 9643.981, 3757.161, 2716.647, 1455.309, 1290.595, 852.63, 284.386, 292.185, 275.09, 297.726, 172.359, 127.731, 166.237, 158.22, 109.839};
    private static double[] SaturnB1B = {5.33289992556, 3.14159265359, 6.09919206378, 2.3058606052, 1.6967466012, 1.25429514018, 5.91166664787, 0.85161616532, 2.9177085709, 0.43572078997, 1.61881754773, 5.3157425127,
            3.88864137336, 0.91909206723, 0.05215146556, 1.20711452525, 2.44351613165, 5.20850125766, 2.45695551627};
    private static double[] SaturnB1C = {213.299095438, 0, 426.598190876, 206.1855484372, 220.4126424388, 419.4846438752, 639.897286314, 433.7117378768, 7.1135470008, 316.3918696566, 227.5261894396, 853.196381752,
            103.0927742186, 632.7837393132, 647.0108333148, 529.6909650946, 199.0720014364, 110.2063212194, 217.2312487011};

    private static double[] SaturnB2A = {20629.977, 3719.555, 1627.158, 1346.067, 705.842, 365.042, 329.632, 219.335, 139.393, 103.98};
    private static double[] SaturnB2B = {0.50482422817, 3.99833475829, 6.181899395, 0, 3.03914308836, 5.09928680706, 5.27899210039, 3.82841533795, 1.04272623499, 6.15730992966};
    private static double[] SaturnB2C = {213.299095438, 206.1855484372, 220.4126424388, 0, 419.4846438752, 426.598190876, 433.7117378768, 639.897286314, 7.1135470008, 227.5261894396};


    //series truncated much. Need more?
    private static double[] SaturnR0A = {955758135.801, 52921382.465, 1873679.934, 1464663.959, 821891.059, 547506.899, 371684.449, 361778.433, 140617.548, 108974.737, 69007.015, 61053.35, 48913.044, 34143.794, 32401.718,
            20936.573, 20839.118, 20746.678, 15298.457, 14296.479, 11993.314, 11380.261, 12884.128, 7752.769, 9796.061, 6465.967, 6770.621, 5850.443, 5307.481, 4695.746, 4043.988, 3688.132, 3376.457, 2885.348, 2976.033, 3419.551,
            3460.943, 3400.616, 2507.63, 2448.325, 2406.138, 2881.181, 2173.959, 2024.483};
    private static double[] SaturnR0B = {0, 2.39226219733, 5.23549605091, 1.64763045468, 5.93520025371, 5.01532628454, 2.27114833428, 3.13904303264, 5.70406652991, 3.29313595577, 5.94099622447, 0.94037761156, 1.55733388472,
            0.19518550682, 5.47084606947, 0.46349163993, 1.5210259064, 5.33255667599, 3.05943652881, 2.60433537909, 5.98051421881, 1.73105746566, 1.64892310393, 5.85191318903, 5.20475863996, 0.17733160145, 3.00433479284, 1.45519636076,
            0.5973753405, 2.14919036956, 1.64010323863, 0.7801613317, 3.69528478828, 1.38764077631, 5.68467931117, 4.94549148887, 1.85088802878, 0.55386747515, 3.53851863255, 6.18412386316, 2.96559220267, 0.17960757891, 0.01508587396, 5.05411271271};
    private static double[] SaturnR0C = {0, 213.299095438, 206.1855484372, 426.598190876, 316.3918696566, 103.0927742186, 220.4126424388, 7.1135470008, 632.7837393132, 110.2063212194, 419.4846438752, 639.897286314, 202.2533951741,
            277.0349937414, 949.1756089698, 735.8765135318, 433.7117378768, 199.0720014364, 529.6909650946, 323.5054166574, 846.0828347512, 522.5774180938, 138.5174968707, 95.9792272178, 1265.5674786264, 1052.2683831884, 14.2270940016,
            415.5524906121, 63.7358983034, 227.5261894396, 209.3669421749, 412.3710968744, 224.3447957019, 838.9692877504, 210.1177017003, 1581.959348283, 175.1660598002, 350.3321196004, 742.9900605326, 1368.660252845, 117.3198682202,
            853.196381752, 340.7708920448, 11.0457002639};

    private static double[] SaturnR1A = {6182981.282, 506577.574, 341394.136, 188491.375, 186261.54, 143891.176, 49621.111, 20928.189, 19952.612, 18839.639, 12892.827, 13876.565, 5396.699, 4869.308, 4247.455, 3252.084, 2856.006, 2909.411,
            3081.408, 1987.689, 1941.309, 1581.446, 1339.511, 1315.59, 1203.085, 1091.088, 954.403, 966.012, 881.827, 874.215, 897.512, 784.866, 739.892, 612.961, 658.21, 649.6, 599.236, 502.886, 413.017, 356.117, 344.777, 395.004, 335.526, 362.772};
    private static double[] SaturnR1B = {0.25843515034, 0.71114650941, 5.7963577396, 0.47215719444, 3.14159265359, 1.40744864239, 6.0174446958, 5.0924565447, 1.17560125007, 1.60819563173, 5.94330258435, 0.75886204364, 1.28852405908,
            0.86793894213, 0.39299384543, 1.25853470491, 2.16731405366, 4.60679154788, 3.43662557418, 2.45054204795, 6.02393385142, 1.29191789712, 4.30801821806, 1.25296446023, 1.86654673794, 0.07527246854, 5.15173410519, 0.47991379141,
            1.88471724478, 1.40224683864, 0.98343776092, 3.06377517461, 1.38225356694, 3.03307306767, 4.1436293098, 1.7248948616, 2.54924174765, 2.12958819475, 4.59334402271, 2.30312127651, 5.88787577835, 0.53349091102, 1.61614647174, 4.70691652867};
    private static double[] SaturnR1C = {213.299095438, 206.1855484372, 426.598190876, 220.4126424388, 0, 7.1135470008, 103.0927742186, 639.897286314, 419.4846438752, 110.2063212194, 433.7117378768, 199.0720014364, 14.2270940016, 323.5054166574,
            227.5261894396, 95.9792272178, 735.8765135318, 202.2533951741, 522.5774180938, 412.3710968744, 209.3669421749, 210.1177017003, 853.196381752, 117.3198682202, 316.3918696566, 216.4804891757, 647.0108333148, 632.7837393132, 1052.2683831884,
            224.3447957019, 529.6909650946, 838.9692877504, 625.6701923124, 63.7358983034, 309.2783226558, 742.9900605326, 217.2312487011, 3.9321532631, 415.5524906121, 728.762966531, 440.8252848776, 956.2891559706, 1368.660252845, 302.164775655};

    private static double[] SaturnR2A = {436902.464, 71922.76, 49766.792, 43220.894, 29645.554, 4141.65, 4720.909, 3789.37, 2963.99, 2556.363, 2208.457, 2187.621, 1956.896, 2326.801, 923.84, 705.936, 546.115, 373.838, 360.882, 356.35, 390.627, 431.485,
            325.598, 405.018, 204.494, 206.854, 178.474, 180.143, 153.656, 147.779, 123.189, 133.076, 100.367, 131.975, 97.235, 110.709, 119.053, 93.852, 108.701};
    private static double[] SaturnR2B = {4.78671673044, 2.50069994874, 4.9716815087, 3.86940443794, 5.96310264282, 4.10670940823, 2.47527992423, 3.09771025067, 1.37206248846, 2.85065721526, 6.27588858707, 5.85545832218, 4.92448618045, 0, 5.46392422737,
            2.97081280098, 4.12854181522, 5.83435991809, 3.27703082368, 3.19152043942, 4.48106176893, 5.17825414612, 2.26867601656, 4.17294157872, 0.0877484859, 4.02188336738, 4.09716541453, 3.59704903955, 3.13470530382, 0.13614300541, 4.18895309647,
            2.5935046942, 5.46056190585, 5.93293968941, 4.01832604356, 4.77853798276, 5.55385105975, 4.38395529912, 5.29310899841};
    private static double[] SaturnR2C = {213.299095438, 206.1855484372, 220.4126424388, 426.598190876, 7.1135470008, 433.7117378768, 199.0720014364, 639.897286314, 103.0927742186, 419.4846438752, 110.2063212194, 14.2270940016, 227.5261894396, 0,
            323.5054166574, 95.9792272178, 412.3710968744, 117.3198682202, 647.0108333148, 210.1177017003, 216.4804891757, 522.5774180938, 853.196381752, 209.3669421749, 202.2533951741, 735.8765135318, 440.8252848776, 632.7837393132, 625.6701923124,
            302.164775655, 88.865680217, 191.9584544356, 3.1813937377, 309.2783226558, 728.762966531, 838.9692877504, 224.3447957019, 217.2312487011, 515.463871093};

    private static double[] UranusL0A = {548129294, 9260408, 1504248, 365982, 272328, 70328, 68893, 61999, 61951, 26469, 25711, 21079, 17819, 14613, 11163, 10998, 9527, 7546, 4220, 4052, 3490, 3355, 3144, 2927, 2922, 2273, 2149, 2051, 1992, 1667, 1533, 1376, 1372, 1284, 1282, 1244, 1221, 1151, 1150, 1090, 1072, 946, 708, 653, 628, 607, 559, 524, 483, 471, 467, 434, 405, 399, 396, 379, 310, 300, 294, 252, 249, 239, 224, 223, 220, 217, 216, 208, 202, 199, 194, 193, 187, 182};
    private static double[] UranusL0B = {0, 0.8910642, 3.6271926, 1.899622, 3.358237, 5.39254, 6.09292, 2.26952, 2.85099, 3.14152, 6.11380, 4.36059, 1.74437, 4.73732, 5.82682, 0.48865, 2.9552, 5.2363, 3.2333, 2.277, 5.4831, 1.0655, 4.7520, 4.6290, 5.3524, 4.3660, 0.6075, 1.5177, 4.9244, 3.6274, 2.5859, 2.042, 4.1964, 3.1135, 0.5427, 0.9161, 0.1990, 4.1790, 0.9334, 1.7750, 0.2356, 1.192, 5.183, 0.966, 0.182, 5.432, 3.358, 2.013, 2.106, 1.407, 0.415, 5.521, 5.987, 0.338, 5.870, 2.350, 5.833, 5.644, 5.839, 1.637, 4.746, 2.350, 0.516, 2.843, 1.922, 6.142, 4.778, 5.580, 1.297, 0.956, 1.888, 0.916, 1.319, 3.536};
    private static double[] UranusL0C = {0, 74.7815986, 1.4844727, 73.297126, 149.563197, 63.73590, 76.26607, 2.96895, 11.04570, 71.81265, 454.90937, 148.07872, 36.64856, 3.93215, 224.34480, 138.51750, 35.1641, 109.9457, 70.8494, 151.0477, 146.5943, 4.4534, 77.7505, 9.5612, 85.8273, 70.3282, 38.1330, 0.1119, 277.0350, 380.1278, 52.6902, 65.2204, 111.4302, 202.2534, 222.8603, 2.4477, 108.4612, 33.6796, 3.1814, 12.5302, 62.2514, 127.472, 213.299, 78.714, 984.600, 529.691, 0.521, 299.126, 0.963, 184.727, 145.110, 183.243, 8.077, 415.552, 351.817, 56.622, 145.631, 22.091, 39.618, 221.376, 225.829, 137.033, 84.343, 0.261, 67.668, 5.938, 340.771, 68.844, 0.048, 152.532, 456.394, 453.425, 0.160, 79.235};

    private static double[] UranusL1A = {7502543122., 154458, 24456, 9258, 8266, 7842, 3899, 2284, 1927, 1233, 791, 767, 482, 450, 446, 427, 354, 348, 317, 206, 189, 184, 180, 171, 158, 155, 154, 152, 143, 121, 116, 102, 102, 88, 88, 81, 72, 69, 59, 47, 44, 43, 39, 36, 36, 36};
    private static double[] UranusL1B = {0, 5.242017, 1.71256, 0.4284, 1.5022, 1.3198, 0.4648, 4.1737, 0.5301, 1.5863, 5.436, 1.996, 2.984, 4.138, 3.723, 4.731, 2.583, 2.454, 5.579, 2.363, 4.202, 0.284, 5.684, 3.001, 2.909, 5.591, 4.652, 2.942, 2.590, 4.148, 3.732, 4.188, 6.034, 3.99, 6.16, 2.64, 6.05, 4.05, 3.70, 3.54, 5.91, 5.72, 4.92, 5.90, 3.29, 3.33};
    private static double[] UranusL1C = {0, 74.781599, 1.48447, 11.0457, 63.7359, 149.5632, 3.9322, 76.2661, 2.9689, 70.8494, 3.181, 73.297, 85.827, 138.517, 224.345, 71.813, 148.079, 9.561, 52.690, 2.448, 56.622, 151.048, 12.530, 78.714, 0.963, 4.453, 35.164, 77.751, 62.251, 127.472, 65.220, 145.631, 0.112, 18.16, 202.25, 22.09, 70.33, 77.96, 67.67, 351.82, 7.11, 5.42, 222.86, 33.68, 8.08, 71.60};

    private static double[] UranusL2A = {53033, 2358, 769, 552, 542, 529, 258, 239, 182, 54, 49, 45, 45, 38, 37};
    private static double[] UranusL2B = {0, 2.2601, 4.526, 3.258, 2.276, 4.923, 3.691, 5.858, 6.218, 1.44, 6.03, 3.91, 0.81, 1.78, 4.46};
    private static double[] UranusL2C = {0, 74.7816, 11.046, 63.736, 3.932, 1.484, 3.181, 149.563, 70.849, 76.27, 56.62, 2.45, 85.83, 52.69, 2.97};

    private static double[] UranusB0A = {1346278, 62341, 61601, 9964, 9926, 3259, 2972, 2010, 1522, 924, 761, 522, 463, 437, 435, 431, 420, 245, 233, 216, 180, 175, 174, 160, 144, 116, 106, 102};
    private static double[] UranusB0B = {2.6187781, 5.08111, 3.14159, 1.6160, 0.5763, 1.2612, 2.2437, 6.0555, 0.2796, 4.038, 6.140, 3.321, 0.743, 3.381, 0.341, 3.554, 5.213, 0.788, 2.257, 1.591, 3.725, 1.236, 1.937, 5.336, 5.962, 5.739, 0.941, 2.619};
    private static double[] UranusB0C = {74.7815986, 149.56320, 0, 76.2661, 73.2971, 224.3448, 1.4845, 148.0787, 63.7359, 151.048, 71.813, 138.517, 85.827, 529.691, 77.751, 213.299, 11.046, 2.969, 222.860, 38.133, 299.126, 146.594, 380.128, 111.430, 35.164, 70.849, 70.328, 78.714};

    private static double[] UranusB1A = {206366, 8563, 1726, 1374, 1369, 451, 400, 307, 154, 112, 111, 83, 56, 54, 42, 41, 32, 30, 27, 26};
    private static double[] UranusB1B = {4.123943, 0.338, 2.1219, 0, 3.0686, 3.777, 2.848, 1.255, 3.786, 5.573, 5.329, 3.59, 3.40, 1.70, 1.21, 4.45, 3.77, 2.56, 5.34, 0.42};
    private static double[] UranusB1C = {74.781599, 2149.5632, 73.2971, 0, 76.2661, 1.484, 224.345, 148.079, 63.736, 151.048, 138.517, 71.81, 85.83, 77.75, 11.05, 78.71, 222.86, 2.97, 213.30, 380.13};

    private static double[] UranusB2A = {9212, 557, 286, 95, 45, 20, 15, 14, 14, 10, 8};
    private static double[] UranusB2B = {5.8004, 0, 2.177, 3.84, 4.88, 5.46, 0.88, 2.85, 5.07, 5.00, 6.27};
    private static double[] UranusB2C = {74.7816, 0, 149.563, 73.30, 76.27, 1.48, 138.52, 148.08, 63.74, 224.34, 78.71};

    private static double[] UranusR0A = {1921264848, 88784984, 3440836, 2055653, 649322, 602248, 496404, 338526, 243508, 190522, 161858, 143706, 93192, 89806, 71424, 46677, 39026, 39010, 36755, 30349, 29156, 25786, 25620, 22637, 20473, 20472, 17901, 15503, 14702, 12897, 12328, 11959, 11853, 11696, 11495, 10793, 9111, 8421, 8402, 7449, 7329, 6046, 5524, 5445, 5238, 4079, 3919, 3802};
    private static double[] UranusR0B = {0, 5.60377527, 0.3283610, 1.7829517, 4.522473, 3.860038, 1.401399, 1.580027, 1.570866, 1.998094, 2.791379, 1.383686, 0.17437, 3.66105, 4.24509, 1.39977, 3.36235, 1.66971, 3.88649, 0.70100, 3.18056, 3.78538, 5.25656, 0.72519, 2.79640, 1.55589, 0.55455, 5.35405, 4.90434, 2.62154, 5.96039, 1.75044, 0.99343, 3.29826, 0.43774, 1.42105, 4.9964, 5.2535, 5.0388, 0.7949, 3.9728, 5.6796, 3.1150, 5.1058, 2.6296, 3.2206, 4.2502, 6.1099};
    private static double[] UranusR0C = {0, 74.78159857, 73.2971259, 149.5631971, 76.266071, 63.735898, 454.909567, 138.517497, 71.812653, 1.484473, 148.078724, 11.045700, 36.64856, 109.94569, 224.34480, 35.16409, 277.03499, 70.84945, 146.59425, 151.04767, 77.75054, 85.82730, 380.12777, 529.69097, 70.32818, 202.25340, 2.96895, 38.13304, 10846122, 111.43016, 127.47180, 984.60033, 52.69020, 3.93215, 65.22037, 213.29910, 62.2514, 222.8603, 415.5525, 351.8166, 183.2428, 78.7138, 9.5612, 145.1098, 33.6796, 340.7709, 39.6175, 184.7273};


    private static double[] UranusR1A = {1479896, 71212, 68627, 24060, 21468, 20857, 11405, 7497, 4244, 3927, 3578, 3506, 3229, 3060, 2564, 2429, 1645, 1584, 1508, 1490, 1413, 1403, 1228, 1033, 992, 862, 744, 687, 647, 624, 604, 575, 562, 530, 528};
    private static double[] UranusR1B = {3.6720571, 6.22601, 6.13411, 3.14159, 2.60177, 5.24625, 0.01848, 0.4236, 1.4169, 3.1551, 2.3116, 2.5835, 5.2550, 0.1532, 0.9808, 3.9944, 2.6535, 1.4305, 5.0600, 2.6756, 4.5746, 1.3699, 1.0470, 0.2646, 2.172, 5.055, 3.076, 2.499, 4.473, 0.863, 0.907, 3.231, 2.718, 5.917, 5.151};
    private static double[] UranusR1C = {74.7815986, 63.73590, 149.56320, 0, 76.26607, 11.04570, 70.84945, 73.2971, 85.8273, 71.8127, 224.3448, 138.5175, 3.9322, 1.4845, 148.0787, 52.6902, 127.4718, 78.7138, 151.0477, 56.6224, 202.2534, 77.7505, 62.2514, 131.4039, 65.220, 351.817, 35.164, 77.963, 70.328, 9.561, 984.600, 447.796, 462.023, 213.299, 2.969};

    private static double[] UranusR2A = {22440, 4727, 1682, 1650, 1434, 770, 500, 461, 390, 390, 292, 287, 273, 220, 216, 205, 149, 129};
    private static double[] UranusR2B = {0.69953, 1.6990, 4.6483, 3.0966, 3.5212, 0, 6.172, 0.767, 4.496, 5.527, 0.204, 3.534, 3.847, 1.964, 0.848, 3.248, 4.898, 2.081};
    private static double[] UranusR2C = {74.78160, 63.7359, 70.8494, 11.0457, 149.5632, 0, 76.266, 3.932, 56.622, 85.827, 52.690, 73.297, 138.517, 131.404, 77.963, 78.714, 127.472, 3.181};

    private static double[] NeptuneL0A = {531188633, 1798476, 1019728, 124532, 42064, 37715, 33785, 16483, 9199, 8994, 4216, 3365, 2285, 1434, 900, 745, 506, 400, 345, 340, 323, 306, 287, 282, 267, 252, 245, 233, 227, 170, 151, 150, 148, 119, 109, 103, 103, 102};
    private static double[] NeptuneL0B = {0, 2.9010127, 0.4858092, 4.830081, 5.41055, 6.09222, 1.24489, 0.00008, 4.9375, 0.2746, 1.9871, 1.0359, 4.2061, 2.7834, 2.076, 3.190, 5.748, 0.350, 3.462, 3.304, 2.248, 0.497, 4.505, 2.246, 4.889, 5.782, 1.247, 2.505, 1.797, 3.324, 2.192, 2.997, 0.859, 3.677, 2.416, 0.041, 4.404, 5.705};
    private static double[] NeptuneL0C = {0, 38.1330356, 1.4844727, 36.648563, 2.96895, 35.16409, 76.26607, 491.55793, 39.6175, 175.1661, 73.2971, 33.6796, 4.4534, 74.7816, 109.946, 71.813, 114.399, 1021.249, 41.102, 77.751, 32.195, 0.521, 0.048, 146.594, 0.963, 388.465, 9.561, 137.033, 453.425, 108.461, 33.940, 5.938, 111.430, 2.448, 183.243, 0.261, 70.328, 0.112};

    private static double[] NeptuneL1A = {3837687717., 16604, 15807, 3335, 1306, 605, 179, 107, 106, 73, 57, 57, 35, 32, 30, 29, 29, 26};
    private static double[] NeptuneL1B = {0, 4.86319, 2.27923, 3.6820, 3.6732, 1.505, 3.453, 2.451, 2.755, 5.49, 1.86, 5.22, 4.52, 5.90, 3.67, 5.17, 5.17, 5.25};
    private static double[] NeptuneL1C = {0, 1.48447, 38.13304, 76.2661, 2.9689, 35.164, 39.618, 4.453, 33.680, 36.65, 114.40, 0.52, 74.78, 77.75, 388.47, 9.56, 2.45, 168.05};

    private static double[] NeptuneL2A = {53893, 296, 281, 270, 23, 9, 7};
    private static double[] NeptuneL2B = {0, 1.855, 1.191, 5.721, 1.21, 4.43, 0.54};
    private static double[] NeptuneL2C = {0, 1.484, 38.133, 76.266, 2.97, 35.16, 2.45};

    private static double[] NeptuneB0A = {3088623, 27780, 27624, 15448, 15355, 2000, 1968, 1015, 606, 595, 589, 402, 280, 262, 254, 206, 140};
    private static double[] NeptuneB0B = {1.4410437, 5.91272, 0, 3.50877, 2.52124, 1.5100, 4.3778, 3.2156, 2.802, 2.129, 3.187, 4.169, 1.682, 3.767, 3.271, 4.257, 3.530};
    private static double[] NeptuneB0C = {38.1330356, 76.26607, 0, 39.61751, 36.64856, 74.7816, 1.4845, 35.1641, 73.297, 41.102, 2.969, 114.399, 77.751, 213.299, 453.425, 529.691, 137.033};

    private static double[] NeptuneB1A = {227279, 1803, 1433, 1386, 1073, 148, 136, 70, 52, 43, 37, 37, 26};
    private static double[] NeptuneB1B = {3.807931, 1.9758, 3.1416, 4.8256, 6.0805, 3.858, 0.478, 6.19, 5.05, 0.31, 4.89, 5.76, 5.22};
    private static double[] NeptuneB1C = {38.133036, 76.2661, 0, 36.6486, 39.6175, 74.782, 1.484, 35.16, 73.30, 114.40, 41.10, 2.97, 213.30};

    private static double[] NeptuneB2A = {9691, 79, 72, 59, 30, 6};
    private static double[] NeptuneB2B = {5.5712, 3.63, 0.45, 3.14, 1.61, 5.61};
    private static double[] NeptuneB2C = {38.1330, 76.27, 36.65, 0, 39.62, 74.78};

    private static double[] NeptuneR0A = {3007013206., 27062259, 1691764, 807831, 537761, 495726, 274572, 135134, 121802, 100895, 69792, 46688, 24594, 16939, 14230, 12012, 8395, 7572, 5721, 4840, 4483, 4421, 4354, 4270, 3381, 2881, 2879, 2636, 2530, 2523, 2306, 2087};
    private static double[] NeptuneR0B = {0, 1.32999459, 3.2518614, 5.185928, 4.521139, 1.571057, 1.845523, 3.372206, 5.797544, 0.377027, 3.79617, 5.749, 0.50802, 1.59422, 1.07786, 1.92062, 0.6782, 1.0715, 2.5906, 1.9069, 2.9057, 1.7499, 0.6799, 3.4134, 0.8481, 1.9860, 3.6742, 3.0976, 5.7984, 0.4863, 2.8096, 0.6186};
    private static double[] NeptuneR0C = {0, 38.13303564, 36.6485629, 1.484473, 35.164090, 491.557929, 175.166060, 39.617508, 76.266071, 73.297126, 2.96895, 38, 109.94569, 71.81265, 74.78160, 1021.24889, 146.5943, 388.4652, 4.4534, 41.1020, 529.6910, 108.4612, 32.1951, 453.4249, 183.2428, 137.0330, 350.3321, 213.2991, 490.0735, 493.0424, 70.3282, 33.9402};

    private static double[] NeptuneR1A = {236339, 13220, 8622, 2702, 2155, 2153, 1603, 1464, 1136, 898, 790, 760, 607, 572, 561};
    private static double[] NeptuneR1B = {0.704980, 3.32015, 6.2163, 1.8814, 2.0943, 5.1687, 0, 1.1842, 3.9189, 5.241, 0.533, 0.021, 1.077, 3.401, 2.887};
    private static double[] NeptuneR1C = {38.133036, 1.48447, 35.1641, 39.6175, 2.9689, 76.2661, 0, 33.6796, 36.6486, 388.465, 168.053, 182.280, 1021.249, 484.444, 498.671};

    private static double[] NeptuneR2A = {4247, 218, 163, 156, 127};
    private static double[] NeptuneR2B = {5.8991, 0.346, 2.239, 4.594, 2.848};
    private static double[] NeptuneR2C = {38.1330, 1.484, 168.053, 182.280, 35.164};


    private static class MoonRec {
        int d;
        int m;
        int m1;
        int f;
        int s1;
        int sr;

        public MoonRec(int d, int m, int m1, int f, int s1, int sr) {
            this.d = d;
            this.m = m;
            this.m1 = m1;
            this.f = f;
            this.s1 = s1;
            this.sr = sr;
        }
    }

    private static final MoonRec[] MoonLong = {new MoonRec(0, 0, 1, 0, 6288774, -20905355),
            new MoonRec(2, 0, -1, 0, 1274027, -3699111),
            new MoonRec(2, 0, 0, 0, 658314, -2955968),
            new MoonRec(0, 0, 2, 0, 213618, -569925),
            new MoonRec(0, 1, 0, 0, -185116, 48888),
            new MoonRec(0, 0, 0, 2, -114332, -3149),
            new MoonRec(2, 0, -2, 0, 58793, 246158),
            new MoonRec(2, -1, -1, 0, 57066, -152138),
            new MoonRec(2, 0, 1, 0, 53322, -170733),
            new MoonRec(2, -1, 0, 0, 45758, -204586),
            new MoonRec(0, 1, -1, 0, -40923, -129620),
            new MoonRec(1, 0, 0, 0, -34720, 108743),
            new MoonRec(0, 1, 1, 0, -30383, 104755),
            new MoonRec(2, 0, 0, -2, 15327, 10321),
            new MoonRec(0, 0, 1, 2, -12528, 0),
            new MoonRec(0, 0, 1, -2, 10980, 79661),
            new MoonRec(4, 0, -1, 0, 10675, -34782),
            new MoonRec(0, 0, 3, 0, 10034, -23210),
            new MoonRec(4, 0, -2, 0, 8548, -21636),
            new MoonRec(2, 1, -1, 0, -7888, 24208),
            new MoonRec(2, 1, 0, 0, -6766, 30824),
            new MoonRec(1, 0, -1, 0, -5163, -8379),
            new MoonRec(1, 1, 0, 0, 4987, -16675),
            new MoonRec(2, -1, 1, 0, 4036, -12831),
            new MoonRec(2, 0, 2, 0, 3994, -10445),
            new MoonRec(4, 0, 0, 0, 3861, -11650),
            new MoonRec(2, 0, -3, 0, 3665, 14403),
            new MoonRec(0, 1, -2, 0, -2689, -7003),
            new MoonRec(2, 0, -1, 2, -2602, 0),
            new MoonRec(2, -1, -2, 0, 2390, 10056),
            new MoonRec(1, 0, 1, 0, -2348, 6322),
            new MoonRec(2, -2, 0, 0, 2236, -9884),
            new MoonRec(0, 1, 2, 0, -2120, 5751),
            new MoonRec(0, 2, 0, 0, -2069, 0),
            new MoonRec(2, -2, -1, 0, 2048, -4950),
            new MoonRec(2, 0, 1, -2, -1773, 4130),
            new MoonRec(2, 0, 0, 2, -1595, 0),
            new MoonRec(4, -1, -1, 0, 1215, -3958),
            new MoonRec(0, 0, 2, 2, -1110, 0),
            new MoonRec(3, 0, -1, 0, -892, 3258),
            new MoonRec(2, 1, 1, 0, -810, 2616),
            new MoonRec(4, -1, -2, 0, 759, -1897),
            new MoonRec(0, 2, -1, 0, -713, -2117)};

    private static MoonRec[] MoonLat = {new MoonRec(0, 0, 0, 1, 5128122, 0),
            new MoonRec(0, 0, 1, 1, 280602, 0),
            new MoonRec(0, 0, 1, -1, 277693, 0),
            new MoonRec(2, 0, 0, -1, 173237, 0),
            new MoonRec(2, 0, -1, 1, 55413, 0),
            new MoonRec(2, 0, -1, -1, 46271, 0),
            new MoonRec(2, 0, 0, 1, 32573, 0),
            new MoonRec(0, 0, 2, 1, 17198, 0),
            new MoonRec(2, 0, 1, -1, 9266, 0),
            new MoonRec(0, 0, 2, -1, 8822, 0),
            new MoonRec(2, -1, 0, -1, 8216, 0),
            new MoonRec(2, 0, -2, -1, 4324, 0),
            new MoonRec(2, 0, 1, 1, 4200, 0),
            new MoonRec(2, 1, 0, -1, -3359, 0),
            new MoonRec(2, -1, -1, 1, 2463, 0),
            new MoonRec(2, -1, 0, 1, 2211, 0),
            new MoonRec(2, -1, -1, -1, 2065, 0),
            new MoonRec(0, 1, -1, -1, -1870, 0),
            new MoonRec(4, 0, -1, -1, 1828, 0),
            new MoonRec(0, 1, 0, 1, -1794, 0),
            new MoonRec(0, 0, 0, 3, -1749, 0),
            new MoonRec(0, 1, -1, 1, -1565, 0),
            new MoonRec(1, 0, 0, 1, -1491, 0),
            new MoonRec(0, 1, 1, 1, -1475, 0),
            new MoonRec(0, 1, 1, -1, -1410, 0),
            new MoonRec(0, 1, 0, -1, -1344, 0),
            new MoonRec(1, 0, 0, -1, -1335, 0),
            new MoonRec(0, 0, 3, 1, 1107, 0),
            new MoonRec(4, 0, 0, -1, 1021, 0),
            new MoonRec(4, 0, -1, 1, 833, 0)};


    private double EclMem(double t, double[] a, double[] b, double[] c) {    //ecliptical member

        //t-julian millenium
        double L = 0;

        for (int i = 0; i < a.length; i++) {
            //Log.d(TAG,"ai="+a[i]);
            L = L + a[i] * cos(b[i] + c[i] * t);
        }
        return L;
    }

    //	public AstroObject(double ra,double dec,double mag,int con,int type,int catalog,int id)
    public Planet(PlanetType pl, Calendar c) {
        super(0, 0, 0, 0, AstroObject.REAL_PLANET, AstroCatalog.PLANET_CATALOG, pl.ordinal());
        this.pl = pl;
        RecC rec = getPlanetRaDec(pl, c);
        this.ra = (float) rec.ra;
        this.dec = (float) rec.dec;
        this.mag = rec.mag;
        this.angular_size = getPlanetSize() / rec.distance * Point.R2D;

    }

    public Planet(PlanetType pl, Calendar c, Context context) {
        this(pl, c);
        planetName = getPlanetName(context, pl);
    }

    public Planet(DataInputStream stream) throws IOException {
        super(stream);
    }

    public static String getPlanetName(Context context, PlanetType pl) {
        switch (pl) {
            case Sun:
                return context.getString(R.string.sun2);
            case Moon:
                return context.getString(R.string.moon2);
            case Mercury:
                return context.getString(R.string.mercury2);
            case Venus:
                return context.getString(R.string.venus2);
            case Earth:
                return context.getString(R.string.earth2);
            case Mars:
                return context.getString(R.string.mars2);
            case Jupiter:
                return context.getString(R.string.jupiter2);
            case Saturn:
                return context.getString(R.string.saturn2);
            case Uranus:
                return context.getString(R.string.uranus2);
            case Neptune:
                return context.getString(R.string.neptune2);
        }
        return null;
    }

    @Override
    public String toString() {
        switch (pl) {
            case Sun:
                return SUN;
            case Moon:
                return MOON;
            case Mercury:
                return MERCURY;
            case Venus:
                return VENUS;
            case Earth:
                return EARTH;
            case Mars:
                return MARS;
            case Jupiter:
                return JUPITER;
            case Saturn:
                return SATURN;
            case Uranus:
                return URANUS;
            case Neptune:
                return NEPTUNE;
        }
        return null;
    }

    /**
     * setting ra dec of current epoch
     *
     * @param c
     */
    public void setRaDec(Calendar c) {
        RecC rec = getPlanetRaDec(pl, c);
        this.ra = (float) rec.ra;
        this.dec = (float) rec.dec;
        this.mag = rec.mag;
        this.angular_size = getPlanetSize() / rec.distance * Point.R2D;
        Log.d(TAG, "size=" + getPlanetSize() + " dist=" + rec.distance);
    }

    public double getMag() {
        return mag;
    }

    public double getAngularSize() {
        return angular_size;
    }

    public PlanetType getPlanetType() {
        return pl;
    }

    /**
     * @return planet size in km
     */
    private double getPlanetSize() {
        switch (pl) {
            case Sun:
                return 1.392e6;
            case Moon:
                return 3474;
            case Mercury:
                return 4640;
            case Venus:
                return 12600;
            case Earth:
                return Double.NaN;
            case Mars:
                return 6720;
            case Jupiter:
                return 141920;
            case Saturn:
                return 120160;
            case Uranus:
                return 51300;
            case Neptune:
                return 48000;
        }
        return Double.NaN;
    }

    @Override
    public void draw(Canvas canvas, final Paint paint) {
        if (!Point.withinBounds(getXd(), getYd())) return;
        float dim = 15;

        if (SettingsActivity.isStarLabelOn()) {
            HrStar.drawLabelAsObject(canvas, paint, getXd(), getYd(), planetName, this);
        }


        if (!Double.isNaN(angular_size) && dim / Point.getWidth() * Point.getFOV() < angular_size) {
            drawRealSize(canvas, paint);
            return;

        }


        switch (pl) {
            case Mercury:
                drawPic(canvas, merpic, dim, 0.016f, true);
                break;
            case Uranus:
                drawPic(canvas, uranpic, dim, 0.016f, true);
                break;
            case Neptune:
                drawPic(canvas, neptpic, dim, 0.016f, true);
                break;
            case Venus:
                drawPic(canvas, venpic, dim, 0.016f, true);
                break;
            case Mars:
                drawPic(canvas, marspic, dim, 0.016f, true);
                break;
            case Moon:
                drawPic(canvas, moonpic, dim, 0.5f, true);
                break;
            case Jupiter:
                drawPic(canvas, juppic, dim, 0.016f, true);
                break;
            case Saturn:
                drawPic(canvas, satpic, dim, 0.016f, true);
                break;
            case Sun:
                drawPic(canvas, sunpic, dim, 0.5f, true);
                break;
            default:
                Path circle = new Path();
                float rad = 1;
                if (Point.getFOV() >= 20) {
                    rad = (float) (7 - mag);
                    rad = (float) (rad * sqrt(45) / sqrt(Point.getFOV()));
                    if (rad < 1) rad = 1;
                } else {
                    rad = (float) (11 - mag);
                    rad = (float) (rad * sqrt(10) / sqrt(Point.getFOV()));
                    if (rad < 1) rad = 1;
                }
                circle.addCircle(xd, yd, rad, Direction.CW);
                canvas.drawPath(circle, paint);
                canvas.drawText(toString(), xd, yd, paint);
                break;
        }


    }


    private static Path static_path = new Path();

    protected static Path getCleanPath() {
        static_path.rewind();
        return static_path;
    }


    private void drawRealSize(Canvas canvas, Paint paint) {
        Path circle = getCleanPath();
        float rad = (float) (angular_size * Point.getWidth() / Point.getFOV() / 2);
        circle.addCircle(getXd(), getYd(), rad, Direction.CW);
        canvas.drawPath(circle, paint);
    }

    private void drawPic(Canvas canvas, Bitmap pic, float dim1, float dim2, boolean smAngle) {
        RectF r = null;
        dim1 = dim1 * Point.getScalingFactor();
        dim2 = dim2 * Point.getScalingFactor();
        r = new RectF(xd - dim1, yd - dim1, xd + dim1, yd + dim1);

        Paint p = null;
        canvas.drawBitmap(pic, null, r, p);
    }

    private EclCoord getFunction(PlanetType pl) {
        switch (pl) {
            case Mercury:
                return new EclCoord() {
                    public Rec EclCoordFunction(double t) {
                        return eclCoordFunctionImpl(t,
                                MercuryL0A, MercuryL0B, MercuryL0C,
                                MercuryL1A, MercuryL1B, MercuryL1C,
                                MercuryL2A, MercuryL2B, MercuryL2C,
                                null, null, null,
                                MercuryB0A, MercuryB0B, MercuryB0C,
                                MercuryB1A, MercuryB1B, MercuryB1C,
                                MercuryB2A, MercuryB2B, MercuryB2C,
                                MercuryR0A, MercuryR0B, MercuryR0C,
                                MercuryR1A, MercuryR1B, MercuryR1C,
                                MercuryR2A, MercuryR2B, MercuryR2C
                        );
                    }

                };
            case Uranus:
                return new EclCoord() {
                    public Rec EclCoordFunction(double t) {
                        return eclCoordFunctionImpl(t,
                                UranusL0A, UranusL0B, UranusL0C,
                                UranusL1A, UranusL1B, UranusL1C,
                                UranusL2A, UranusL2B, UranusL2C,
                                null, null, null,
                                UranusB0A, UranusB0B, UranusB0C,
                                UranusB1A, UranusB1B, UranusB1C,
                                UranusB2A, UranusB2B, UranusB2C,
                                UranusR0A, UranusR0B, UranusR0C,
                                UranusR1A, UranusR1B, UranusR1C,
                                UranusR2A, UranusR2B, UranusR2C
                        );
                    }

                };
            case Neptune:
                return new EclCoord() {
                    public Rec EclCoordFunction(double t) {
                        return eclCoordFunctionImpl(t,
                                NeptuneL0A, NeptuneL0B, NeptuneL0C,
                                NeptuneL1A, NeptuneL1B, NeptuneL1C,
                                NeptuneL2A, NeptuneL2B, NeptuneL2C,
                                null, null, null,
                                NeptuneB0A, NeptuneB0B, NeptuneB0C,
                                NeptuneB1A, NeptuneB1B, NeptuneB1C,
                                NeptuneB2A, NeptuneB2B, NeptuneB2C,
                                NeptuneR0A, NeptuneR0B, NeptuneR0C,
                                NeptuneR1A, NeptuneR1B, NeptuneR1C,
                                NeptuneR2A, NeptuneR2B, NeptuneR2C
                        );
                    }

                };
            case Venus:

                EclCoord venus = new EclCoord() {
                    public Rec EclCoordFunction(double t) {
                        double r0 = EclMem(t, VenusL0A, VenusL0B, VenusL0C);
                        double r1 = EclMem(t, VenusL1A, VenusL1B, VenusL1C);
                        double r2 = EclMem(t, VenusL2A, VenusL2B, VenusL2C);
                        double r3 = 0;
                        double r4 = 0;
                        double r5 = 0;
                        double L = (r0 + r1 * t + r2 * t * t + r3 * t * t * t + r4 * t * t * t * t + r5 * t * t * t * t * t) * 1e-08;   //ecliptical longitude
                        if (L > 0)
                            L = L - (2 * PI) * (int) (L / (2 * PI));
                        else
                            L = L - (2 * PI) * ((int) (L / (2 * PI)) - 1);


                        r0 = EclMem(t, VenusB0A, VenusB0B, VenusB0C);
                        r1 = EclMem(t, VenusB1A, VenusB1B, VenusB1C);
                        r2 = EclMem(t, VenusB2A, VenusB2B, VenusB2C);
                        r3 = EclMem(t, VenusB3A, VenusB3B, VenusB3C);
                        r4 = 0;
                        double B = (r0 + r1 * t + r2 * t * t + r3 * t * t * t + r4 * t * t * t * t) * 1e-08;

                        if (B < -PI)
                            B = B - ((int) ((B + PI) / (2 * PI)) - 1) * (2 * PI);
                        else if (B > PI)
                            B = B - ((int) ((B + PI) / (2 * PI))) * (2 * PI);

                        r0 = EclMem(t, VenusR0A, VenusR0B, VenusR0C);
                        r1 = EclMem(t, VenusR1A, VenusR1B, VenusR1C);
                        r2 = EclMem(t, VenusR2A, VenusR2B, VenusR2C);
                        r3 = 0;
                        r4 = 0;
                        double R = (r0 + r1 * t + r2 * t * t + r3 * t * t * t + r4 * t * t * t * t) * 1e-08;
                        return (new Rec(L, B, R));

                    }
                };
                return venus;
            case Earth:
                EclCoord earth = new EclCoord() {
                    public Rec EclCoordFunction(double t) {
                        double r0 = EclMem(t, EarthL0A, EarthL0B, EarthL0C);
                        double r1 = EclMem(t, EarthL1A, EarthL1B, EarthL1C);
                        double r2 = EclMem(t, EarthL2A, EarthL2B, EarthL2C);
                        double r3 = EclMem(t, EarthL3A, EarthL3B, EarthL3C);
                        double r4 = 0;
                        double r5 = 0;
                        double L = (r0 + r1 * t + r2 * t * t + r3 * t * t * t + r4 * t * t * t * t + r5 * t * t * t * t * t) * 1e-08;   //ecliptical longitude
                        if (L > 0)
                            L = L - (2 * PI) * (int) (L / (2 * PI));
                        else
                            L = L - (2 * PI) * ((int) (L / (2 * PI)) - 1);


                        r0 = EclMem(t, EarthB0A, EarthB0B, EarthB0C);
                        double B = (r0) * 1e-08;

                        if (B < -PI)
                            B = B - ((int) ((B + PI) / (2 * PI)) - 1) * (2 * PI);
                        else if (B > PI)
                            B = B - ((int) ((B + PI) / (2 * PI))) * (2 * PI);

                        r0 = EclMem(t, EarthR0A, EarthR0B, EarthR0C);
                        r1 = EclMem(t, EarthR1A, EarthR1B, EarthR1C);
                        r2 = EclMem(t, EarthR2A, EarthR2B, EarthR2C);
                        r3 = 0;
                        r4 = 0;
                        double R = (r0 + r1 * t + r2 * t * t + r3 * t * t * t + r4 * t * t * t * t) * 1e-08;
                        return (new Rec(L, B, R));

                    }
                };
                return earth;
            case Jupiter:
                EclCoord jupiter = new EclCoord() {
                    public Rec EclCoordFunction(double t) {
                        double r0 = EclMem(t, JupiterL0A, JupiterL0B, JupiterL0C);
                        double r1 = EclMem(t, JupiterL1A, JupiterL1B, JupiterL1C);
                        double r2 = EclMem(t, JupiterL2A, JupiterL2B, JupiterL2C);

                        double L = (r0 + r1 * t + r2 * t * t) * 1e-08;   //ecliptical longitude
                        if (L > 0)
                            L = L - (2 * PI) * (int) (L / (2 * PI));
                        else
                            L = L - (2 * PI) * ((int) (L / (2 * PI)) - 1);


                        r0 = EclMem(t, JupiterB0A, JupiterB0B, JupiterB0C);
                        r1 = EclMem(t, JupiterB1A, JupiterB1B, JupiterB1C);
                        r2 = EclMem(t, JupiterB2A, JupiterB2B, JupiterB2C);
                        double B = (r0 + r1 * t + r2 * t * t) * 1e-08;

                        if (B < -PI)
                            B = B - ((int) ((B + PI) / (2 * PI)) - 1) * (2 * PI);
                        else if (B > PI)
                            B = B - ((int) ((B + PI) / (2 * PI))) * (2 * PI);

                        r0 = EclMem(t, JupiterR0A, JupiterR0B, JupiterR0C);
                        r1 = EclMem(t, JupiterR1A, JupiterR1B, JupiterR1C);
                        r2 = EclMem(t, JupiterR2A, JupiterR2B, JupiterR2C);

                        double R = (r0 + r1 * t + r2 * t * t) * 1e-08;
                        return (new Rec(L, B, R));

                    }
                };
                return jupiter;

            case Saturn:
                EclCoord saturn = new EclCoord() {
                    public Rec EclCoordFunction(double t) {

                        return eclCoordFunctionImpl(t,
                                SaturnL0A, SaturnL0B, SaturnL0C,
                                SaturnL1A, SaturnL1B, SaturnL1C,
                                SaturnL2A, SaturnL2B, SaturnL2C,
                                null, null, null,
                                SaturnB0A, SaturnB0B, SaturnB0C,
                                SaturnB1A, SaturnB1B, SaturnB1C,
                                SaturnB2A, SaturnB2B, SaturnB2C,
                                SaturnR0A, SaturnR0B, SaturnR0C,
                                SaturnR1A, SaturnR1B, SaturnR1C,
                                SaturnR2A, SaturnR2B, SaturnR2C
                        );
                    }
                };
                return saturn;
            case Mars:
                EclCoord mars = new EclCoord() {
                    public Rec EclCoordFunction(double t) {
                        double r0 = EclMem(t, MarsL0A, MarsL0B, MarsL0C);
                        double r1 = EclMem(t, MarsL1A, MarsL1B, MarsL1C);
                        double r2 = EclMem(t, MarsL2A, MarsL2B, MarsL2C);
                        double r3 = EclMem(t, MarsL3A, MarsL3B, MarsL3C);
                        double r4 = 0;
                        double r5 = 0;
                        double L = (r0 + r1 * t + r2 * t * t + r3 * t * t * t + r4 * t * t * t * t + r5 * t * t * t * t * t) * 1e-08;   //ecliptical longitude
                        if (L > 0)
                            L = L - (2 * PI) * (int) (L / (2 * PI));
                        else
                            L = L - (2 * PI) * ((int) (L / (2 * PI)) - 1);


                        r0 = EclMem(t, MarsB0A, MarsB0B, MarsB0C);
                        r1 = EclMem(t, MarsB1A, MarsB1B, MarsB1C);
                        r2 = EclMem(t, MarsB2A, MarsB2B, MarsB2C);
                        double B = (r0 + r1 * t + r2 * t * t) * 1e-08;

                        if (B < -PI)
                            B = B - ((int) ((B + PI) / (2 * PI)) - 1) * (2 * PI);
                        else if (B > PI)
                            B = B - ((int) ((B + PI) / (2 * PI))) * (2 * PI);

                        r0 = EclMem(t, MarsR0A, MarsR0B, MarsR0C);
                        r1 = EclMem(t, MarsR1A, MarsR1B, MarsR1C);
                        r2 = EclMem(t, MarsR2A, MarsR2B, MarsR2C);
                        r3 = 0;
                        r4 = 0;
                        double R = (r0 + r1 * t + r2 * t * t + r3 * t * t * t + r4 * t * t * t * t) * 1e-08;
                        return (new Rec(L, B, R));

                    }
                };
                return mars;
        }
        return null;
    }

    private Rec eclCoordFunctionImpl(double t,
                                     double[] l0a, double[] l0b, double[] l0c,
                                     double[] l1a, double[] l1b, double[] l1c,
                                     double[] l2a, double[] l2b, double[] l2c,
                                     double[] l3a, double[] l3b, double[] l3c,
                                     double[] b0a, double[] b0b, double[] b0c,
                                     double[] b1a, double[] b1b, double[] b1c,
                                     double[] b2a, double[] b2b, double[] b2c,
                                     double[] r0a, double[] r0b, double[] r0c,
                                     double[] r1a, double[] r1b, double[] r1c,
                                     double[] r2a, double[] r2b, double[] r2c
    ) {

        double r0 = 0;
        if (l0a != null && l0b != null && l0c != null)
            r0 = EclMem(t, l0a, l0b, l0c);

        double r1 = 0;
        if (l1a != null && l1b != null && l1c != null)
            r1 = EclMem(t, l1a, l1b, l1c);

        double r2 = 0;
        if (l2a != null && l2b != null && l2c != null)
            r2 = EclMem(t, l2a, l2b, l2c);

        double r3 = 0;
        if (l3a != null && l3b != null && l3c != null)
            r3 = EclMem(t, l3a, l3b, l3c);

        double L = (r0 + r1 * t + r2 * t * t + r3 * t * t * t) * 1e-08;   //ecliptical longitude
        if (L > 0)
            L = L - (2 * PI) * (int) (L / (2 * PI));
        else
            L = L - (2 * PI) * ((int) (L / (2 * PI)) - 1);


        r0 = EclMem(t, b0a, b0b, b0c);
        r1 = EclMem(t, b1a, b1b, b1c);
        r2 = EclMem(t, b2a, b2b, b2c);
        double B = (r0 + r1 * t + r2 * t * t) * 1e-08;

        if (B < -PI)
            B = B - ((int) ((B + PI) / (2 * PI)) - 1) * (2 * PI);
        else if (B > PI)
            B = B - ((int) ((B + PI) / (2 * PI))) * (2 * PI);

        r0 = EclMem(t, r0a, r0b, r0c);
        r1 = EclMem(t, r1a, r1b, r1c);
        r2 = EclMem(t, r2a, r2b, r2c);

        double R = (r0 + r1 * t + r2 * t * t) * 1e-08;
        return (new Rec(L, B, R));
    }


    /**
     * current epoch ra dec
     *
     * @param pl
     * @param c
     * @return
     */
    private RecC getPlanetRaDec(PlanetType pl, Calendar c) { //p.211
        if (pl == PlanetType.Moon) {
            return getMoonRaDec(c, true); //with parallax
        }
        if (pl == PlanetType.MoonNoParallax) {
            return getMoonRaDec(c, false); //no parallax
        }
        if (pl == PlanetType.Sun)
            return getSunRaDec(c);

        int year = c.get(Calendar.YEAR);
        int month = c.get(Calendar.MONTH) + 1;
        int day = c.get(Calendar.DAY_OF_MONTH);
        int hour = c.get(Calendar.HOUR_OF_DAY);
        int min = c.get(Calendar.MINUTE);

        double d = day + hour / 24.0 + min / (24.0 * 60f);

        double t = AstroTools.JD(year, month, 0, 0, 0);
        t = t - 2451545.0;
        t = (t + d - (c.get(Calendar.ZONE_OFFSET) / 1000.0 + c.get(Calendar.DST_OFFSET) / 1000.0) / (3600.0 * 24.0)) / 365250.0;
        Rec plr = getFunction(pl).EclCoordFunction(t);
        Rec er = getFunction(PlanetType.Earth).EclCoordFunction(t);
        double x = plr.r * cos(plr.b) * cos(plr.l) - er.r * cos(er.b) * cos(er.l);  //rectangular coords of planet relative to earth
        double y = plr.r * cos(plr.b) * sin(plr.l) - er.r * cos(er.b) * sin(er.l);
        double z = plr.r * sin(plr.b) - er.r * sin(er.b);

        double dist = sqrt(x * x + y * y + z * z);
        double distance = dist * 1.495978e8;    //in km
        double dt = 0.0057755183 * dist; //time for light to go from planet to earth (we actually see planet at moment t-dt)


        t = t - dt / 365250.0; //smotrim gde zemplya i planeta byli v moment t-dt, stolko
        //trebuetsya svetu na preodoleniye rasstotaniya do zemli+ eto uchityvaet
        //aberratsiyu ot dvizheniya zemli
        plr = getFunction(pl).EclCoordFunction(t);
        er = getFunction(PlanetType.Earth).EclCoordFunction(t);
        x = plr.r * cos(plr.b) * cos(plr.l) - er.r * cos(er.b) * cos(er.l);  //rectangular coords of planet relative to earth
        y = plr.r * cos(plr.b) * sin(plr.l) - er.r * cos(er.b) * sin(er.l);
        z = plr.r * sin(plr.b) - er.r * sin(er.b);

        double lo = atan2(y, x);
        //ecliptic longitude relative to earth before nutation

        double la = atan(z / sqrt(x * x + y * y));//ecliptic lattitude
        //nutation calculation
        t = t * 10;
        double LAN = (125.04452 - 1934.13626 * t + 0.0020708 * t * t + t * t * t / 450000.0) * PI / 180;//longtitude of moon ascending node


        double L = (280.4665 + 36000.7698 * t); //sun mean longitude
        L = L * PI / 180;
        double LM = (218.3165 + 481267.8813 * t);//moon mean longitude
        LM = LM * PI / 180; //compiler bug

        double dl = (-17.20 * sin(LAN) - 1.32 * sin(2 * L) - 0.23 * sin(2 * LM) + 0.21 * sin(2 * LAN)) / 3600 * PI / 180;
        double de = (9.20 * cos(LAN) + 0.57 * cos(2 * L)) / 3600 * PI / 180;
        //end of nutation calculation

        //mean obliquity of ecliptic in radians, nutation not taken into account
        double e = (23 + 26.0 / 60 + 21.448 / 3600 - 46.815 / 3600 * t) * PI / 180;

        e = e + de; //ecliptic obliquity taking nutation into account
        lo = lo + dl;//ecliptic longitude relative to earth taking nutation into account


        double ra = atan2(sin(lo) * cos(e) - tan(la) * sin(e), cos(lo)) * 12 / PI;
        double dec = asin(sin(la) * cos(e) + cos(la) * sin(e) * sin(lo)) * 180 / PI;

        //magnitude calculation
        double i = acos((plr.r * plr.r + dist * dist - er.r * er.r) / (2 * plr.r * dist));
        i = i * 180 / PI;
        double mag = Double.NaN;
        switch (pl) {
            case Mercury: //p.269
                mag = 1.16 + 5 * log10(plr.r * dist) + 0.02838 * (i - 50) + 0.0001023 * (i - 50) * (i - 50);
                break;
            case Uranus:
                mag = -6.85 + 5 * log10(plr.r * dist);
                break;
            case Neptune:
                mag = -7.05 + 5 * log10(plr.r * dist);
                break;
            case Venus:
                mag = -4 + 5 * log10(plr.r * dist) + 0.01322 * i + 4.247e-7 * i * i * i;
                break;
            case Mars:
                mag = -1.3 + 5 * log10(plr.r * dist) + 0.01486 * i;
                break;
            case Jupiter:
                mag = -8.93 + 5 * log10(plr.r * dist);
                break;
            case Saturn:
                double incl = (28.0752 - 0.013 * t * 10);
                incl = incl * PI / 180;
                double Node = (169.508 + 1.3947 * t * 10);
                Node = Node * PI / 180;
                double sinB = abs(sin(incl) * cos(la) * sin(lo - Node) - cos(incl) * sin(la));
                mag = -8.68 + 5 * log10(plr.r * dist) - 2.6 * sinB;
                break;
        }
        return (new RecC(ra, dec, mag, distance));

    }

    private RecC getMoonRaDec(Calendar c, boolean parallax) {


        double slong = 0;
        double slat = 0;
        double sr = 0;
        int year = c.get(Calendar.YEAR);
        int month = c.get(Calendar.MONTH) + 1;
        int day = c.get(Calendar.DAY_OF_MONTH);
        int hour = c.get(Calendar.HOUR_OF_DAY);
        int min = c.get(Calendar.MINUTE);

        double d = day + hour / 24.0 + min / (24.0 * 60f);

        double t = AstroTools.JD(year, month, 0, 0, 0);
        t = t - 2451545.0;
        t = (t + d - (c.get(Calendar.ZONE_OFFSET) / 1000.0 + c.get(Calendar.DST_OFFSET) / 1000.0) / (3600 * 24.0)) / 36525.0;


        double L1 = (218.31645 + 481267.88 * t - 0.0013268 * t * t + t * t * t / 538841);
        L1 = L1 * PI / 180;
        double D = 297.85020 + 445267.11 * t - 0.00163 * t * t + t * t * t / 545868;
        D = D * PI / 180;
        double M = 357.52911 + 35999.05 * t - 0.0001536 * t * t;
        M = M * PI / 180;
        double M1 = 134.96341 + 477198.87 * t + 0.008997 * t * t + t * t * t / 69699;
        M1 = M1 * PI / 180;
        double F = 93.272099 + 483202.017 * t - 0.0034029 * t * t;
        F = F * PI / 180;
        double A1 = 119.75 + 131.849 * t;
        A1 = A1 * PI / 180;
        double A2 = 53.09 + 479264.29 * t;
        A2 = A2 * PI / 180;
        double A3 = 313.45 + 481266.48 * t;
        A3 = A3 * PI / 180;
        double E = 1 - 0.002516 * t - 0.0000074 * t * t;
        for (int i = 0; i < 43; i++) {
            int MM = MoonLong[i].m;
            double MME = 0;
            switch (MM) {
                case 1:
                case -1:
                    MME = MM * E;
                    break;
                case 2:
                case -2:
                    MME = MM * E * E;
                    break;
            }
            double AAA = MoonLong[i].d * D + MME * M + MoonLong[i].m1 * M1 + MoonLong[i].f * F;
            slong = slong + MoonLong[i].s1 * sin(AAA);

            sr = sr + MoonLong[i].sr * cos(AAA);
        }
        for (int i = 0; i < 30; i++) {
            int MM = MoonLat[i].m;
            double MME = 0;
            switch (MM) {
                case -1:
                case 1:
                    MME = MM * E;
                    break;
                case -2:
                case 2:
                    MME = MM * E * E;
                    break;
            }
            double CCC = MoonLat[i].d * D + MME * M + MoonLat[i].m1 * M1 + MoonLat[i].f * F;
            slat = slat + MoonLat[i].s1 * sin(CCC);
        }
        slong = slong + 3958 * sin(A1) + 1962 * sin(L1 - F) + 318 * sin(A2);
        slat = slat - 2235 * sin(L1) + 382 * sin(A3) + 175 * sin(A1 - F) + 175 * sin(A1 + F) + 127 * sin(L1 - M1) - 115 * sin(L1 + M1);
        slong = L1 + slong / 1000000 * PI / 180;
        slat = slat / 1000000 * PI / 180;
        double dist = 385000 + sr / 1000;
        this.dist = dist;//for debug purposes

        //nutation calculation

        double LAN = (125.04452 - 1934.13626 * t + 0.0020708 * t * t + t * t * t / 450000.0) * PI / 180;//longtitude of moon ascending node


        double L = (280.4665 + 36000.7698 * t); //sun mean longitude
        L = L * PI / 180;
        double LM = (218.3165 + 481267.8813 * t);//moon mean longitude
        LM = LM * PI / 180; //compiler bug

        double dl = (-17.20 * sin(LAN) - 1.32 * sin(2 * L) - 0.23 * sin(2 * LM) + 0.21 * sin(2 * LAN)) / 3600 * PI / 180;
        double de = (9.20 * cos(LAN) + 0.57 * cos(2 * L)) / 3600 * PI / 180;
        //end of nutation calculation

        //mean obliquity of ecliptic in radians, nutation not taken into account
        double e = (23 + 26.0 / 60 + 21.448 / 3600 - 46.815 / 3600 * t) * PI / 180;

        e = e + de; //ecliptic obliquity taking nutation into account

        slong = slong + dl;
        double ra = atan2(sin(slong) * cos(e) - tan(slat) * sin(e), cos(slong)) * 12 / PI;
        double dec = asin(sin(slat) * cos(e) + cos(slat) * sin(e) * sin(slong)) * 180 / PI;

        RaDecRec rec = AstroTools.get2000RaDec(ra, dec, c);
        ra = rec.ra;
        dec = rec.dec;


        Holder2<Double, Double> h = null;
        if (parallax)
            h = Planet.parallax(ra, dec, dist, c);
        else
            h = new Holder2<Double, Double>(ra, dec);


        return new RecC(h.x, h.y, Double.NaN, dist);
    }

    public static Holder2<Double, Double> parallax(double ra, double dec, double dist, Calendar c) {//return new ra,new dec

        double h = AstroTools.sdTime(c) - ra;//in hours
        double dau = dist / 149597870;//distance in AU
        double sinpar = 8.794 / 3600 / dau * PI / 180;//in grad
        double lat = SettingsActivity.getLattitude() * PI / 180;
        double dra = 12 / PI * atan(-cos(lat) * sinpar * sin(h * PI / 12) / (cos(dec * PI / 180) - cos(lat) * sinpar * cos(h * PI / 12)));
        double newdec = 180 / PI * atan((sin(dec * PI / 180) - sin(lat) * sinpar) / (cos(dec * PI / 180) - cos(lat) * sinpar * cos(h * PI / 12)));
        return new Holder2(ra + dra, newdec);
    }

    private RecC getSunRaDec(Calendar c) {


        int year = c.get(Calendar.YEAR);
        int month = c.get(Calendar.MONTH) + 1;
        int day = c.get(Calendar.DAY_OF_MONTH);
        int hour = c.get(Calendar.HOUR_OF_DAY);
        int min = c.get(Calendar.MINUTE);

        double d = day + hour / 24.0 + min / (24.0 * 60f);

        double t = AstroTools.JD(year, month, 0, 0, 0);
        t = t - 2451545.0;
        t = (t + d - (c.get(Calendar.ZONE_OFFSET) / 1000.0 + c.get(Calendar.DST_OFFSET) / 1000.0) / (3600 * 24.0)) / 36525.0;


        double L = (280.46645 + 36000.770 * t + 0.0003032 * t * t);//geometric mean longitude referred to the mean equinox of the date
        L = L * PI / 180;
        double M = (357.52910 + 35999.05 * t - 0.0001559 * t * t);//mean anomaly of the sun

        M = M * PI / 180;
        double C = ((1.9146 - 0.004817 * t - 1.4e-5 * t * t) * sin(M) +
                (0.019993 - 0.000101 * t) * sin(2 * M) + 0.00029 * sin(3 * M));//equation of center
        C = C * PI / 180;
        L = L + C;
        double ecc = 0.016708617 - 0.000042 * t;
        double dist = 1.000001 * (1 - ecc * ecc) / (1 + ecc * cos(M + C)) * 1.495978e8; //in km

        double Node = (125.04 - 1934.136 * t);
        Node = Node * PI / 180;


        L = -(0.00569 + 0.00478 * sin(Node)) * PI / 180 + L;//correction for nutation & aberration


        //mean obliquity of ecliptic in radians, nutation not taken into account
        double e = (23 + 26.0 / 60 + 21.448 / 3600 - 46.815 / 3600 * t) * PI / 180;


        e = e + 0.00256 * cos(Node) * PI / 180;//adjustment for nutation
        ra = (float) (atan2(cos(e) * sin(L), cos(L)) * 12 / PI);
        dec = (float) (asin(sin(e) * sin(L)) * 180 / PI);

        RaDecRec rec = AstroTools.get2000RaDec(ra, dec, c);
        ra = (float) rec.ra;
        dec = (float) rec.dec;

        return new RecC(ra, dec, Double.NaN, dist);
    }


    public boolean hasDimension() {
        return true;
    }

    public double getA() {
        return angular_size * 60;
    }

    public double getB() {
        return angular_size * 60;
    }

    public String getConString() {
        return "";
    }

    public String getShortName() {
        try {
            return getPlanetName(Global.getAppContext(), pl);
        } catch (Exception e) {
        }

        return toString();
    }

    public String getLongName() {
        return getShortName();
    }

    public String getDsoSelName() {
        return getShortName();
    }

    @Override
    /**
     * ra dec for the planet is calculated at time c and then precessed back to 2000
     */
    public void recalculateRaDec(Calendar c) {
        setRaDec(c);
        AstroTools.RaDecRec rec = AstroTools.get2000RaDec(ra, dec, c);
        ra = (float) rec.ra;
        dec = (float) rec.dec;
    }

    public int getClassTypeId() {
        return Exportable.PLANET_OBJECT;
    }

    @Override
    public boolean hasVisibility() {
        return false;
    }

}
